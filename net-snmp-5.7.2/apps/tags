!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCESS_OID_LEN	snmpvacm.c	80;"	d	file:
ADD_IFVAR	snmpnetstat/if.c	219;"	d	file:
ADD_IFVAR	snmpnetstat/if.c	256;"	d	file:
ADD_IFVAR	snmpnetstat/if.c	587;"	d	file:
ADD_IFVAR	snmpnetstat/if.c	603;"	d	file:
ADD_IFVAR	snmpnetstat/if.c	686;"	d	file:
ADD_IFVAR	snmpnetstat/if.c	702;"	d	file:
ADD_RTVAR	snmpnetstat/route.c	116;"	d	file:
ADD_RTVAR	snmpnetstat/route.c	123;"	d	file:
AF_INET6	snmpnetstat/main.h	18;"	d
AUTH_OID_LEN	snmpvacm.c	82;"	d	file:
Aflag	snmpnetstat/main.c	/^int	Aflag;		\/* show addresses of protocol control block *\/$/;"	v
BSD4_2	snmptrapd.c	129;"	d	file:
BSD4_2	snmptrapd_log.c	92;"	d	file:
C	snmpnetstat/inet.c	643;"	d	file:
C	snmpnetstat/route.c	302;"	d	file:
CHR_AGENT_IP	snmptrapd_log.c	/^    CHR_AGENT_IP = 'a',         \/* agent's IP address *\/$/;"	e	enum:__anon4	file:
CHR_AGENT_NAME	snmptrapd_log.c	/^    CHR_AGENT_NAME = 'A',       \/* agent's host name if available *\/$/;"	e	enum:__anon4	file:
CHR_ALT_FORM	snmptrapd_log.c	/^    CHR_ALT_FORM = '#',         \/* use alternate format *\/$/;"	e	enum:__anon4	file:
CHR_CUR_HOUR	snmptrapd_log.c	/^    CHR_CUR_HOUR = 'h',         \/* current hour *\/$/;"	e	enum:__anon4	file:
CHR_CUR_MDAY	snmptrapd_log.c	/^    CHR_CUR_MDAY = 'l',         \/* current day of month *\/$/;"	e	enum:__anon4	file:
CHR_CUR_MIN	snmptrapd_log.c	/^    CHR_CUR_MIN = 'j',          \/* current minute *\/$/;"	e	enum:__anon4	file:
CHR_CUR_MONTH	snmptrapd_log.c	/^    CHR_CUR_MONTH = 'm',        \/* current month *\/$/;"	e	enum:__anon4	file:
CHR_CUR_SEC	snmptrapd_log.c	/^    CHR_CUR_SEC = 'k',          \/* current second *\/$/;"	e	enum:__anon4	file:
CHR_CUR_TIME	snmptrapd_log.c	/^    CHR_CUR_TIME = 't',         \/* current time, Unix format *\/$/;"	e	enum:__anon4	file:
CHR_CUR_YEAR	snmptrapd_log.c	/^    CHR_CUR_YEAR = 'y',         \/* current year *\/$/;"	e	enum:__anon4	file:
CHR_FIELD_SEP	snmptrapd_log.c	/^    CHR_FIELD_SEP = '.',        \/* separates width and precision fields *\/$/;"	e	enum:__anon4	file:
CHR_FMT_DELIM	snmptrapd_log.c	/^    CHR_FMT_DELIM = '%',        \/* starts a format command *\/$/;"	e	enum:__anon4	file:
CHR_LEAD_ZERO	snmptrapd_log.c	/^    CHR_LEAD_ZERO = '0',        \/* use leading zeroes *\/$/;"	e	enum:__anon4	file:
CHR_LEFT_JUST	snmptrapd_log.c	/^    CHR_LEFT_JUST = '-',        \/* left justify *\/$/;"	e	enum:__anon4	file:
CHR_PDU_ENT	snmptrapd_log.c	/^    CHR_PDU_ENT = 'N',          \/* PDU's enterprise string *\/$/;"	e	enum:__anon4	file:
CHR_PDU_IP	snmptrapd_log.c	/^    CHR_PDU_IP = 'b',           \/* PDU's IP address *\/$/;"	e	enum:__anon4	file:
CHR_PDU_NAME	snmptrapd_log.c	/^    CHR_PDU_NAME = 'B',         \/* PDU's host name if available *\/$/;"	e	enum:__anon4	file:
CHR_PDU_WRAP	snmptrapd_log.c	/^    CHR_PDU_WRAP = 'P',         \/* PDU's wrapper info (community, security) *\/$/;"	e	enum:__anon4	file:
CHR_SNMP_SECMOD	snmptrapd_log.c	/^    CHR_SNMP_SECMOD  = 'S',     \/* SNMPv3 Security Model Version Number *\/$/;"	e	enum:__anon4	file:
CHR_SNMP_USER	snmptrapd_log.c	/^    CHR_SNMP_USER = 'u',        \/* SNMPv3 secName or v1\/v2c community *\/$/;"	e	enum:__anon4	file:
CHR_SNMP_VERSION	snmptrapd_log.c	/^    CHR_SNMP_VERSION = 's',     \/* SNMP Version Number *\/$/;"	e	enum:__anon4	file:
CHR_TRAP_CONTEXTID	snmptrapd_log.c	/^    CHR_TRAP_CONTEXTID = 'E',   \/* SNMPv3 context engineID if available *\/$/;"	e	enum:__anon4	file:
CHR_TRAP_DESC	snmptrapd_log.c	/^    CHR_TRAP_DESC = 'W',        \/* trap's description (textual) *\/$/;"	e	enum:__anon4	file:
CHR_TRAP_NUM	snmptrapd_log.c	/^    CHR_TRAP_NUM = 'w',         \/* trap number *\/$/;"	e	enum:__anon4	file:
CHR_TRAP_STYPE	snmptrapd_log.c	/^    CHR_TRAP_STYPE = 'q',       \/* trap's subtype *\/$/;"	e	enum:__anon4	file:
CHR_TRAP_VARS	snmptrapd_log.c	/^    CHR_TRAP_VARS = 'v'        \/* tab-separated list of trap's variables *\/$/;"	e	enum:__anon4	file:
CHR_TRAP_VARSEP	snmptrapd_log.c	/^    CHR_TRAP_VARSEP = 'V',      \/* character (or string) to separate variables *\/$/;"	e	enum:__anon4	file:
CHR_UP_HOUR	snmptrapd_log.c	/^    CHR_UP_HOUR = 'H',          \/* uptime hour *\/$/;"	e	enum:__anon4	file:
CHR_UP_MDAY	snmptrapd_log.c	/^    CHR_UP_MDAY = 'L',          \/* uptime day of month *\/$/;"	e	enum:__anon4	file:
CHR_UP_MIN	snmptrapd_log.c	/^    CHR_UP_MIN = 'J',           \/* uptime minute *\/$/;"	e	enum:__anon4	file:
CHR_UP_MONTH	snmptrapd_log.c	/^    CHR_UP_MONTH = 'M',         \/* uptime month *\/$/;"	e	enum:__anon4	file:
CHR_UP_SEC	snmptrapd_log.c	/^    CHR_UP_SEC = 'K',           \/* uptime second *\/$/;"	e	enum:__anon4	file:
CHR_UP_TIME	snmptrapd_log.c	/^    CHR_UP_TIME = 'T',          \/* uptime, Unix format *\/$/;"	e	enum:__anon4	file:
CHR_UP_YEAR	snmptrapd_log.c	/^    CHR_UP_YEAR = 'Y',          \/* uptime year *\/$/;"	e	enum:__anon4	file:
CMD_ACTIVATE	snmpusm.c	75;"	d	file:
CMD_ACTIVATE_NAME	snmpusm.c	74;"	d	file:
CMD_CHANGEKEY	snmpusm.c	79;"	d	file:
CMD_CHANGEKEY_NAME	snmpusm.c	78;"	d	file:
CMD_CLONEFROM	snmpusm.c	73;"	d	file:
CMD_CLONEFROM_NAME	snmpusm.c	72;"	d	file:
CMD_CREATE	snmpusm.c	69;"	d	file:
CMD_CREATEACCESS	snmpvacm.c	54;"	d	file:
CMD_CREATEACCESS_NAME	snmpvacm.c	53;"	d	file:
CMD_CREATEAUTH	snmpvacm.c	62;"	d	file:
CMD_CREATEAUTH_NAME	snmpvacm.c	61;"	d	file:
CMD_CREATESEC2GROUP	snmpvacm.c	50;"	d	file:
CMD_CREATESEC2GROUP_NAME	snmpvacm.c	49;"	d	file:
CMD_CREATEVIEW	snmpvacm.c	58;"	d	file:
CMD_CREATEVIEW_NAME	snmpvacm.c	57;"	d	file:
CMD_CREATE_NAME	snmpusm.c	68;"	d	file:
CMD_DEACTIVATE	snmpusm.c	77;"	d	file:
CMD_DEACTIVATE_NAME	snmpusm.c	76;"	d	file:
CMD_DELETE	snmpusm.c	71;"	d	file:
CMD_DELETEACCESS	snmpvacm.c	56;"	d	file:
CMD_DELETEACCESS_NAME	snmpvacm.c	55;"	d	file:
CMD_DELETEAUTH	snmpvacm.c	64;"	d	file:
CMD_DELETEAUTH_NAME	snmpvacm.c	63;"	d	file:
CMD_DELETESEC2GROUP	snmpvacm.c	52;"	d	file:
CMD_DELETESEC2GROUP_NAME	snmpvacm.c	51;"	d	file:
CMD_DELETEVIEW	snmpvacm.c	60;"	d	file:
CMD_DELETEVIEW_NAME	snmpvacm.c	59;"	d	file:
CMD_DELETE_NAME	snmpusm.c	70;"	d	file:
CMD_NUM	snmpusm.c	81;"	d	file:
CMD_NUM	snmpvacm.c	66;"	d	file:
CMD_PASSWD	snmpusm.c	67;"	d	file:
CMD_PASSWD_NAME	snmpusm.c	66;"	d	file:
Closing	agentxtrap.c	/^const struct tState_s Closing = {$/;"	v	typeref:struct:tState_s
ClosingClose	agentxtrap.c	/^ClosingClose(UNUSED tState self, UNUSED netsnmp_pdu *act)$/;"	f	file:
ClosingDisconnect	agentxtrap.c	/^ClosingDisconnect(UNUSED tState self)$/;"	f	file:
ClosingEntry	agentxtrap.c	/^ClosingEntry(UNUSED tState self)$/;"	f	file:
ClosingRes	agentxtrap.c	/^ClosingRes(UNUSED tState self, netsnmp_pdu *act)$/;"	f	file:
Connecting	agentxtrap.c	/^const struct tState_s Connecting = {$/;"	v	typeref:struct:tState_s
ConnectingEntry	agentxtrap.c	/^ConnectingEntry(UNUSED tState self)$/;"	f	file:
DEBUG	sshtosnmp.c	48;"	d	file:
DEBUG	sshtosnmp.c	61;"	d	file:
DEBUGGING	sshtosnmp.c	45;"	d	file:
DEFAULT_SOCK_PATH	sshtosnmp.c	35;"	d	file:
DH_USM_OID_LEN	snmpusm.c	94;"	d	file:
Disconnecting	agentxtrap.c	/^const struct tState_s Disconnecting = {$/;"	v	typeref:struct:tState_s
DisconnectingEntry	agentxtrap.c	/^DisconnectingEntry(UNUSED tState self)$/;"	f	file:
EXECUTE_FORMAT	snmptrapd_handlers.c	784;"	d	file:
Exit	agentxtrap.c	/^const struct tState_s Exit = {$/;"	v	typeref:struct:tState_s
FD_CLR	snmptrapd.c	138;"	d	file:
FD_ISSET	snmptrapd.c	139;"	d	file:
FD_SET	snmptrapd.c	137;"	d	file:
FD_ZERO	snmptrapd.c	140;"	d	file:
Facility	snmptrapd.c	/^int Facility = LOG_DAEMON;$/;"	v
GETSERVBYPORT6	snmpnetstat/inet6.c	406;"	d	file:
HAVE_GETPASS	encode_keychange.c	99;"	d	file:
HOST_FN	snmpnetstat/winstub.c	49;"	d	file:
INET	snmpnetstat/route.c	66;"	d	file:
Iflist	snmpnetstat/route.c	/^}              *Iflist = NULL;$/;"	v	typeref:struct:iflist
LOG_CONS	snmptrapd.c	168;"	d	file:
LOG_DAEMON	snmptrapd.c	198;"	d	file:
LOG_LOCAL0	snmptrapd.c	174;"	d	file:
LOG_LOCAL1	snmptrapd.c	177;"	d	file:
LOG_LOCAL2	snmptrapd.c	180;"	d	file:
LOG_LOCAL3	snmptrapd.c	183;"	d	file:
LOG_LOCAL4	snmptrapd.c	186;"	d	file:
LOG_LOCAL5	snmptrapd.c	189;"	d	file:
LOG_LOCAL6	snmptrapd.c	192;"	d	file:
LOG_LOCAL7	snmptrapd.c	195;"	d	file:
LOG_PID	snmptrapd.c	171;"	d	file:
MAXHOSTNAMELEN	snmpnetstat/main.h	3;"	d
MAXIF	snmpnetstat/if.c	474;"	d	file:
MAXPATHLEN	sshtosnmp.c	32;"	d	file:
MAX_ARGS	snmpdelta.c	70;"	d	file:
NETSNMPTRAPD_AUTH_HANDLER	snmptrapd_handlers.h	45;"	d
NETSNMPTRAPD_DEFAULT_HANDLER	snmptrapd_handlers.h	48;"	d
NETSNMPTRAPD_HANDLER_BREAK	snmptrapd_handlers.h	52;"	d
NETSNMPTRAPD_HANDLER_FAIL	snmptrapd_handlers.h	51;"	d
NETSNMPTRAPD_HANDLER_FINISH	snmptrapd_handlers.h	53;"	d
NETSNMPTRAPD_HANDLER_OK	snmptrapd_handlers.h	50;"	d
NETSNMPTRAPD_POST_HANDLER	snmptrapd_handlers.h	47;"	d
NETSNMPTRAPD_PRE_HANDLER	snmptrapd_handlers.h	46;"	d
NETSNMP_DS_APP_DONT_FIX_PDUS	snmpdelta.c	71;"	d	file:
NETSNMP_DS_APP_DONT_FIX_PDUS	snmpget.c	69;"	d	file:
NETSNMP_DS_APP_DONT_FIX_PDUS	snmpgetnext.c	67;"	d	file:
NETSNMP_DS_APP_DONT_FIX_PDUS	snmpstatus.c	97;"	d	file:
NETSNMP_DS_APP_NO_AUTHORIZATION	snmptrapd_ds.h	11;"	d
NETSNMP_DS_APP_NUMERIC_IP	snmptrapd_ds.h	10;"	d
NETSNMP_DS_WALK_DONT_CHECK_LEXICOGRAPHIC	snmpbulkwalk.c	70;"	d	file:
NETSNMP_DS_WALK_DONT_CHECK_LEXICOGRAPHIC	snmpwalk.c	69;"	d	file:
NETSNMP_DS_WALK_DONT_GET_REQUESTED	snmpwalk.c	71;"	d	file:
NETSNMP_DS_WALK_INCLUDE_REQUESTED	snmpbulkwalk.c	68;"	d	file:
NETSNMP_DS_WALK_INCLUDE_REQUESTED	snmpwalk.c	67;"	d	file:
NETSNMP_DS_WALK_PRINT_STATISTICS	snmpbulkwalk.c	69;"	d	file:
NETSNMP_DS_WALK_PRINT_STATISTICS	snmpwalk.c	68;"	d	file:
NETSNMP_DS_WALK_TIME_RESULTS	snmpwalk.c	70;"	d	file:
NETSNMP_DS_WALK_TIME_RESULTS_SINGLE	snmpwalk.c	72;"	d	file:
NETSNMP_ENABLE_IPV6	snmpnetstat/route.c	345;"	d	file:
NETSNMP_MYSQL_TRAP_VALUE_TEXT	snmptrapd_sql.c	103;"	d	file:
NETSNMP_SSHTOSNMP_VERSION_NUMBER	sshtosnmp.c	37;"	d	file:
NETSNMP_TRAPHANDLER_FLAG_MATCH_TREE	snmptrapd_handlers.h	11;"	d
NETSNMP_TRAPHANDLER_FLAG_STRICT_SUBTREE	snmptrapd_handlers.h	12;"	d
NETSNMP_USE_ASSERT	snmptls.c	8;"	d	file:
NETW_FN	snmpnetstat/winstub.c	51;"	d	file:
NFDBITS	snmptrapd.c	135;"	d	file:
NI_MAXHOST	snmpnetstat/main.h	22;"	d
NL	encode_keychange.c	51;"	d	file:
NO	snmpnetstat/if.c	64;"	d	file:
NSVACMACCESSTABLE	snmpvacm.c	100;"	d	file:
Netsnmp_Trap_Handler	snmptrapd_handlers.h	/^typedef int (Netsnmp_Trap_Handler)(netsnmp_pdu           *pdu,$/;"	t
Notifying	agentxtrap.c	/^const struct tState_s Notifying = {$/;"	v	typeref:struct:tState_s
NotifyingEntry	agentxtrap.c	/^NotifyingEntry(UNUSED tState self)$/;"	f	file:
NotifyingRes	agentxtrap.c	/^NotifyingRes(UNUSED tState self, netsnmp_pdu *act)$/;"	f	file:
OPTIONLIST	encode_keychange.c	55;"	d	file:
Opening	agentxtrap.c	/^const struct tState_s Opening = {$/;"	v	typeref:struct:tState_s
OpeningEntry	agentxtrap.c	/^OpeningEntry(UNUSED tState self)$/;"	f	file:
OpeningRes	agentxtrap.c	/^OpeningRes(UNUSED tState self, netsnmp_pdu *act)$/;"	f	file:
PACKAGE_BUGREPORT	snmptrapd_sql.c	48;"	d	file:
PACKAGE_NAME	snmptrapd_sql.c	49;"	d	file:
PACKAGE_STRING	snmptrapd_sql.c	50;"	d	file:
PACKAGE_TARNAME	snmptrapd_sql.c	51;"	d	file:
PACKAGE_VERSION	snmptrapd_sql.c	52;"	d	file:
PARSE_BACKSLASH	snmptrapd_log.c	/^    PARSE_BACKSLASH,            \/* saw a backslash *\/$/;"	e	enum:__anon5	file:
PARSE_GET_PRECISION	snmptrapd_log.c	/^    PARSE_GET_PRECISION,        \/* getting field precision *\/$/;"	e	enum:__anon5	file:
PARSE_GET_SEPARATOR	snmptrapd_log.c	/^    PARSE_GET_SEPARATOR         \/* getting field separator *\/$/;"	e	enum:__anon5	file:
PARSE_GET_WIDTH	snmptrapd_log.c	/^    PARSE_GET_WIDTH,            \/* getting field width *\/$/;"	e	enum:__anon5	file:
PARSE_IN_FORMAT	snmptrapd_log.c	/^    PARSE_IN_FORMAT,            \/* saw a % sign, in a format command *\/$/;"	e	enum:__anon5	file:
PARSE_NORMAL	snmptrapd_log.c	/^    PARSE_NORMAL,               \/* looking for next character *\/$/;"	e	enum:__anon5	file:
PASSPHRASE_DIR	encode_keychange.c	57;"	d	file:
PASSPHRASE_FILE	encode_keychange.c	61;"	d	file:
PID	snmptrapd.c	/^    FILE           *PID;$/;"	v
PLEN	snmpnetstat/netstat.h	40;"	d
PRINT_V23_NOTIFICATION_FORMAT	snmptrapd_handlers.c	705;"	d	file:
PROT_FN	snmpnetstat/winstub.c	44;"	d	file:
PROT_FN	snmpnetstat/winstub.c	47;"	d	file:
ROOT_BASE	snmpnetstat/winstub.c	43;"	d	file:
ROOT_BASE	snmpnetstat/winstub.c	46;"	d	file:
SEC2GROUP_OID_LEN	snmpvacm.c	79;"	d	file:
SERV_FN	snmpnetstat/winstub.c	50;"	d	file:
SET_ALL	snmpnetstat/route.c	80;"	d	file:
SET_GWAY	snmpnetstat/route.c	76;"	d	file:
SET_IFNO	snmpnetstat/route.c	77;"	d	file:
SET_MASK	snmpnetstat/route.c	75;"	d	file:
SET_PRTO	snmpnetstat/route.c	79;"	d	file:
SET_TYPE	snmpnetstat/route.c	78;"	d	file:
SNMPTRAPD_AUTH_H	snmptrapd_auth.h	2;"	d
SNMPTRAPD_DS_H	snmptrapd_ds.h	2;"	d
SNMPTRAPD_HANDLERS_H	snmptrapd_handlers.h	2;"	d
SNMPTRAPD_RUNNING	snmptrapd.c	211;"	d	file:
SNMPTRAPD_STOPPED	snmptrapd.c	212;"	d	file:
STATE_CALL	agentxtrap.c	103;"	d	file:
STRTOK_DELIMS	snmpnetstat/winstub.c	163;"	d	file:
SYSLOG_V1_ENTERPRISE_FORMAT	snmptrapd_handlers.c	622;"	d	file:
SYSLOG_V1_STANDARD_FORMAT	snmptrapd_handlers.c	621;"	d	file:
SYSLOG_V23_NOTIFICATION_FORMAT	snmptrapd_handlers.c	623;"	d	file:
Sflag	snmpnetstat/main.c	/^int	Sflag;		\/* show source address in routing table *\/$/;"	v
SnmpTrapdMain	snmptrapd.c	/^SnmpTrapdMain(int argc, TCHAR * argv[])$/;"	f
StateClose	agentxtrap.c	/^StateClose(UNUSED tState self, netsnmp_pdu *act)$/;"	f	file:
StateDisconnect	agentxtrap.c	/^StateDisconnect(UNUSED tState self)$/;"	f	file:
StopSnmpTrapd	snmptrapd.c	/^StopSnmpTrapd(void)$/;"	f
SumFile	snmpdelta.c	/^const char     *SumFile = "Sum";$/;"	v
SyslogTrap	snmptrapd_handlers.c	/^int   SyslogTrap = 0;$/;"	v
TBIND_DATE	snmptrapd_sql.c	/^    TBIND_DATE = 0,           \/* time received *\/$/;"	e	enum:__anon1	file:
TBIND_HOST	snmptrapd_sql.c	/^    TBIND_HOST,               \/* src ip *\/$/;"	e	enum:__anon1	file:
TBIND_MAX	snmptrapd_sql.c	/^    TBIND_MAX$/;"	e	enum:__anon1	file:
TBIND_OID	snmptrapd_sql.c	/^    TBIND_OID,                \/* trap OID *\/$/;"	e	enum:__anon1	file:
TBIND_REQID	snmptrapd_sql.c	/^    TBIND_REQID,              \/* request id *\/$/;"	e	enum:__anon1	file:
TBIND_SECURITY_MODEL	snmptrapd_sql.c	/^    TBIND_SECURITY_MODEL,     \/* security model *\/$/;"	e	enum:__anon1	file:
TBIND_TRANSPORT	snmptrapd_sql.c	/^    TBIND_TRANSPORT,          \/* transport *\/$/;"	e	enum:__anon1	file:
TBIND_TYPE	snmptrapd_sql.c	/^    TBIND_TYPE,               \/* pdu type *\/$/;"	e	enum:__anon1	file:
TBIND_USER	snmptrapd_sql.c	/^    TBIND_USER,               \/* auth\/user information *\/$/;"	e	enum:__anon1	file:
TBIND_VER	snmptrapd_sql.c	/^    TBIND_VER,                \/* snmp version *\/$/;"	e	enum:__anon1	file:
TBIND_v3_CONTEXT_ENGINE	snmptrapd_sql.c	/^    TBIND_v3_CONTEXT_ENGINE,  \/* context engine id *\/$/;"	e	enum:__anon1	file:
TBIND_v3_CONTEXT_NAME	snmptrapd_sql.c	/^    TBIND_v3_CONTEXT_NAME,    \/* context *\/$/;"	e	enum:__anon1	file:
TBIND_v3_MSGID	snmptrapd_sql.c	/^    TBIND_v3_MSGID,           \/* v3 msg id *\/$/;"	e	enum:__anon1	file:
TBIND_v3_SECURITY_ENGINE	snmptrapd_sql.c	/^    TBIND_v3_SECURITY_ENGINE, \/* security engine id *\/$/;"	e	enum:__anon1	file:
TBIND_v3_SECURITY_LEVEL	snmptrapd_sql.c	/^    TBIND_v3_SECURITY_LEVEL,  \/* security level *\/$/;"	e	enum:__anon1	file:
TBIND_v3_SECURITY_NAME	snmptrapd_sql.c	/^    TBIND_v3_SECURITY_NAME,   \/* security name *\/$/;"	e	enum:__anon1	file:
TCP_NSTATES	snmpnetstat/inet.c	105;"	d	file:
TCP_NSTATES	snmpnetstat/inet6.c	104;"	d	file:
TRAP_AUTH_ALL	snmptrapd_auth.h	13;"	d
TRAP_AUTH_EXE	snmptrapd_auth.h	10;"	d
TRAP_AUTH_LOG	snmptrapd_auth.h	9;"	d
TRAP_AUTH_NET	snmptrapd_auth.h	11;"	d
TRAP_AUTH_NONE	snmptrapd_auth.h	14;"	d
UNDEF_CMD	snmptrapd_log.c	98;"	d	file:
UNDEF_PRECISION	snmptrapd_log.c	99;"	d	file:
UNUSED	agentxtrap.c	23;"	d	file:
USAGE	encode_keychange.c	53;"	d	file:
USM_OID_LEN	snmpusm.c	93;"	d	file:
VBIND_ID	snmptrapd_sql.c	/^    VBIND_ID = 0,             \/* trap_id *\/$/;"	e	enum:__anon2	file:
VBIND_MAX	snmptrapd_sql.c	/^    VBIND_MAX$/;"	e	enum:__anon2	file:
VBIND_OID	snmptrapd_sql.c	/^    VBIND_OID,                \/* varbind oid *\/$/;"	e	enum:__anon2	file:
VBIND_TYPE	snmptrapd_sql.c	/^    VBIND_TYPE,               \/* varbind type *\/$/;"	e	enum:__anon2	file:
VBIND_VAL	snmptrapd_sql.c	/^    VBIND_VAL,                \/* varbind value *\/$/;"	e	enum:__anon2	file:
VIEW_OID_LEN	snmpvacm.c	81;"	d	file:
WID_DST	snmpnetstat/route.c	223;"	d	file:
WID_DST	snmpnetstat/route.c	229;"	d	file:
WID_DST	snmpnetstat/route.c	233;"	d	file:
WID_GW	snmpnetstat/route.c	224;"	d	file:
WID_GW	snmpnetstat/route.c	230;"	d	file:
WID_GW	snmpnetstat/route.c	234;"	d	file:
WIN32SERVICE	snmptrapd.c	118;"	d	file:
YES	snmpnetstat/if.c	63;"	d	file:
_NO_PROTO	snmpnetstat/winstub.c	17;"	d	file:
_SNMPTRAPD_LOG_H	snmptrapd_log.h	2;"	d
_WINSTUB_H_	snmpnetstat/winstub.h	3;"	d
_XOPEN_SOURCE	snmpnetstat/if.c	53;"	d	file:
_XOPEN_SOURCE_EXTENDED	snmpnetstat/if.c	56;"	d	file:
_data	snmptls.c	/^static char         *_data = NULL, *_map_type_str = NULL, *_id_str = NULL;$/;"	v	file:
_data_len	snmptls.c	/^static size_t        _data_len;$/;"	v	file:
_dump_stats	snmpnetstat/inet.c	/^_dump_stats( const char *name, oid *oid_buf, size_t buf_len,$/;"	f
_dump_v6stats	snmpnetstat/inet6.c	/^_dump_v6stats( const char *name, oid *oid_buf, size_t buf_len,$/;"	f
_ffs	snmpnetstat/ffs.c	/^_ffs(int mask)$/;"	f
_fp_str	snmptls.c	/^static char         *_storage_type_str = NULL, *_fp_str = NULL;$/;"	v	file:
_hash_type	snmptls.c	/^static int           _storage_type = ST_NONE, _hash_type = NS_HASH_NONE;$/;"	v	file:
_id_str	snmptls.c	/^static char         *_data = NULL, *_map_type_str = NULL, *_id_str = NULL;$/;"	v	file:
_if_info	snmpnetstat/if.c	/^    struct _if_info {$/;"	s	file:
_map_type_str	snmptls.c	/^static char         *_data = NULL, *_map_type_str = NULL, *_id_str = NULL;$/;"	v	file:
_no_v3	snmptrapd_sql.c	/^static my_bool    _no_v3;$/;"	v	file:
_parse_interval_fmt	snmptrapd_sql.c	/^_parse_interval_fmt(const char *token, char *cptr)$/;"	f	file:
_parse_queue_fmt	snmptrapd_sql.c	/^_parse_queue_fmt(const char *token, char *cptr)$/;"	f	file:
_parse_storage_type	snmptls.c	/^_parse_storage_type(const char *arg)$/;"	f
_set_address	snmpnetstat/if.c	/^_set_address( struct _if_info *cur_if )$/;"	f
_sql	snmptrapd_sql.c	/^static netsnmp_sql_globals _sql = {$/;"	v	file:
_sql_buf_free	snmptrapd_sql.c	/^_sql_buf_free(sql_buf *sqlb, void* dontcare)$/;"	f	file:
_sql_buf_get	snmptrapd_sql.c	/^_sql_buf_get(void)$/;"	f	file:
_sql_log	snmptrapd_sql.c	/^_sql_log(sql_buf *sqlb, void* dontcare)$/;"	f	file:
_sql_process_queue	snmptrapd_sql.c	/^_sql_process_queue(u_int dontcare, void *meeither)$/;"	f	file:
_sql_save	snmptrapd_sql.c	/^_sql_save(sql_buf *sqlb, void *dontcare)$/;"	f	file:
_sql_save_trap_info	snmptrapd_sql.c	/^_sql_save_trap_info(sql_buf *sqlb, netsnmp_pdu  *pdu,$/;"	f	file:
_sql_save_varbind_info	snmptrapd_sql.c	/^_sql_save_varbind_info(sql_buf *sqlb, netsnmp_pdu  *pdu)$/;"	f	file:
_sql_vb_buf_free	snmptrapd_sql.c	/^_sql_vb_buf_free(sql_vb_buf *sqlvb, void* dontcare)$/;"	f	file:
_storage_type	snmptls.c	/^static int           _storage_type = ST_NONE, _hash_type = NS_HASH_NONE;$/;"	v	file:
_storage_type_str	snmptls.c	/^static char         *_storage_type_str = NULL, *_fp_str = NULL;$/;"	v	file:
_tbind	snmptrapd_sql.c	/^static MYSQL_BIND _tbind[TBIND_MAX], _vbind[VBIND_MAX];$/;"	v	file:
_tmain	snmptrapd.c	/^_tmain(int argc, TCHAR * argv[])$/;"	f
_vbind	snmptrapd_sql.c	/^static MYSQL_BIND _tbind[TBIND_MAX], _vbind[VBIND_MAX];$/;"	v	file:
access_oid	snmpvacm.c	/^access_oid(oid * it, size_t * len, const char *groupName,$/;"	f
add	snmpdf.c	/^add(netsnmp_pdu *pdu, const char *mibnodename,$/;"	f
addrChg	snmptls.c	/^const oid addrChg[] = { SNMP_TLS_TM_ADDR_CHANGED };$/;"	v
addrNum	snmptls.c	/^const oid addrNum[] = { SNMP_TLS_TM_ADDR_COUNT };$/;"	v
addrTbl	snmptls.c	/^const oid addrTbl[] = { SNMP_TLS_TM_ADDR_TABLE };$/;"	v
addr_row_create	snmptls.c	/^addr_row_create(const char *target_name, int hash_type, const char *fp,$/;"	f
af	snmpnetstat/main.c	/^int	af;		\/* address family *\/$/;"	v
aflag	snmpnetstat/main.c	/^int	aflag;		\/* show all sockets (including servers) *\/$/;"	v
alarm_id	snmptrapd_sql.c	/^    u_int        alarm_id;        \/* id of periodic save alarm *\/$/;"	m	struct:netsnmp_sql_globals_t	file:
allocated	snmptable.c	/^static int      allocated;$/;"	v	file:
alt_format	snmptrapd_log.c	/^    int             alt_format; \/* if true, display in alternate format *\/$/;"	m	struct:__anon3	file:
app_name	snmptrapd.c	/^const char     *app_name = "snmptrapd";$/;"	v
app_name_long	snmptrapd.c	/^LPCTSTR         app_name_long = _T("Net-SNMP Trap Handler");     \/* Application Name *\/$/;"	v
authKeyChange	snmpusm.c	/^oid            *authKeyChange = authKeyOid, *privKeyChange = privKeyOid;$/;"	v	file:
authKeyOid	snmpusm.c	/^authKeyOid[MAX_OID_LEN] = { 1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 6 },$/;"	v	file:
auth_oid	snmpvacm.c	/^auth_oid(oid * it, size_t * len, const char *groupName,$/;"	f
authtypes	snmptrapd_handlers.h	/^     int   authtypes;$/;"	m	struct:netsnmp_trapd_handler_s
axforward_handler	snmptrapd_handlers.c	/^int axforward_handler( netsnmp_pdu           *pdu,$/;"	f
axforward_handler	snmptrapd_handlers.h	/^Netsnmp_Trap_Handler   axforward_handler;$/;"	v
bflag	snmpnetstat/main.c	/^int	bflag;		\/* show bytes instead of packets *\/$/;"	v
brief	snmptable.c	/^static int      brief = 0;$/;"	v	file:
c64value	snmpdelta.c	/^    struct counter64 c64value;$/;"	m	struct:varInfo	typeref:struct:varInfo::counter64	file:
catchalarm	snmpnetstat/if.c	/^catchalarm(int sig)$/;"	f
certChg	snmptls.c	/^const oid certChg[] = { SNMP_TLS_TM_CERT_CHANGED };$/;"	v
certMapTypes	snmptls.c	/^const oid *certMapTypes[TSNM_tlstmCert_MAX + 1] = {$/;"	v
certTbl	snmptls.c	/^const oid certTbl[] = { SNMP_TLS_TM_CERT_TABLE };$/;"	v
cert_row_create	snmptls.c	/^cert_row_create(uint32_t priority, int hash_type, const char *fp,$/;"	f
change_state	agentxtrap.c	/^change_state(tState new_state)$/;"	f	file:
close	agentxtrap.c	/^    void (*close)(tState self, netsnmp_pdu *res);$/;"	m	struct:tState_s	file:
cmd	snmptrapd_log.c	/^    char            cmd;        \/* the format command itself *\/$/;"	m	struct:__anon3	file:
collect	snmpdf.c	/^collect(netsnmp_session * ss, netsnmp_pdu *pdu,$/;"	f
column	snmptable.c	/^struct column {$/;"	s	file:
column	snmptable.c	/^}              *column = NULL;$/;"	v	typeref:struct:column
column_width	snmptable.c	/^static int      column_width = 0;$/;"	v	file:
command	snmptest.c	/^int             command = SNMP_MSG_GET;$/;"	v
command_handler	snmptrapd_handlers.c	/^int   command_handler( netsnmp_pdu           *pdu,$/;"	f
command_handler	snmptrapd_handlers.h	/^Netsnmp_Trap_Handler   command_handler;$/;"	v
conn	snmptrapd_sql.c	/^    MYSQL       *conn;            \/* connection *\/$/;"	m	struct:netsnmp_sql_globals_t	file:
connected	snmptrapd_sql.c	/^    u_char       connected;       \/* connected flag *\/$/;"	m	struct:netsnmp_sql_globals_t	file:
context	agentxtrap.c	/^static const char  *context = NULL; \/**<< Context that delivers the trap *\/$/;"	v	file:
context	snmptrapd_sql.c	/^    char      *context;$/;"	m	struct:sql_buf_t	file:
contextLen	agentxtrap.c	/^static size_t       contextLen; \/**<< Length of eventual context *\/$/;"	v	file:
context_engine	snmptrapd_sql.c	/^    char      *context_engine;$/;"	m	struct:sql_buf_t	file:
context_engine_len	snmptrapd_sql.c	/^    u_long     context_engine_len;$/;"	m	struct:sql_buf_t	file:
context_len	snmptrapd_sql.c	/^    u_long     context_len;$/;"	m	struct:sql_buf_t	file:
convert_units	snmpdf.c	/^convert_units(unsigned long value, size_t units, size_t divisor)$/;"	f
copyright	snmpnetstat/main.c	/^char copyright[] =$/;"	v
current_name	snmpdelta.c	/^int             current_name = 0;$/;"	v
data	snmptable.c	/^static char   **data = NULL;$/;"	v	file:
db_name	snmptrapd_sql.c	/^    const char  *db_name;         \/* database name (def=none) *\/$/;"	m	struct:netsnmp_sql_globals_t	file:
ddefault_port	snmptrapd.c	/^char            ddefault_port[] = "udp:162";	\/* Default default port *\/$/;"	v
deb	sshtosnmp.c	/^deb(const char *string) {$/;"	f
debf	sshtosnmp.c	/^FILE *debf = NULL;$/;"	v
default_port	snmptrapd.c	/^char           *default_port = ddefault_port;$/;"	v
deltat	snmpdelta.c	/^int             deltat = 0, timestamp = 0, fileout = 0, dosum =$/;"	v
descr	snmptrapd_handlers.c	/^   const char             *descr;$/;"	m	struct:netsnmp_handler_map_t	file:
description	snmpnetstat/inet.c	/^    char            description[80];$/;"	m	struct:stat_table	file:
description	snmpnetstat/inet6.c	/^    char            description[80];$/;"	m	struct:stat_table	file:
descriptor	snmpdelta.c	/^    char            descriptor[64];$/;"	m	struct:varInfo	file:
destination	snmpnetstat/route.c	/^    in_addr_t       destination;$/;"	m	struct:route_entry	file:
dflag	snmpnetstat/main.c	/^int	dflag;		\/* show i\/f dropped packets *\/$/;"	v
dhauthKeyChange	snmpusm.c	/^oid            *dhauthKeyChange = usmDHUserAuthKeyChange,$/;"	v
dhprivKeyChange	snmpusm.c	/^               *dhprivKeyChange = usmDHUserPrivKeyChange;$/;"	v
disconnect	agentxtrap.c	/^    void (*disconnect)(tState self); \/**<< Handler for disconnect indications *\/$/;"	m	struct:tState_s	file:
doauthkey	snmpusm.c	/^int             doauthkey = 0, doprivkey = 0, uselocalizedkey = 0;$/;"	v
docreateandwait	snmpusm.c	/^int             docreateandwait = 0;$/;"	v
dofork	snmptrapd.c	/^int             dofork = 1;$/;"	v
doprivkey	snmpusm.c	/^int             doauthkey = 0, doprivkey = 0, uselocalizedkey = 0;$/;"	v
dosum	snmpdelta.c	/^int             deltat = 0, timestamp = 0, fileout = 0, dosum =$/;"	v
dropauth	snmptrapd_handlers.c	/^int   dropauth = 0;$/;"	v
drops	snmpnetstat/if.c	/^        int             drops;$/;"	m	struct:_if_info	file:
end_name	snmpwalk.c	/^char           *end_name = NULL;$/;"	v
end_of_table	snmptable.c	/^static int      end_of_table = 1;$/;"	v	file:
endhostent	snmpnetstat/winstub.c	/^endhostent(void)$/;"	f
endnetent	snmpnetstat/winstub.c	/^endnetent(void)$/;"	f
endprotoent	snmpnetstat/winstub.c	/^endprotoent(void)$/;"	f
endservent	snmpnetstat/winstub.c	/^endservent(void)$/;"	f
engineid	encode_keychange.c	/^u_char         *engineid = NULL;        \/* Both input & final binary form. *\/$/;"	v
engineid_len	encode_keychange.c	/^size_t          engineid_len = 0;$/;"	v
entries	snmptable.c	/^static int      entries;$/;"	v	file:
entry	agentxtrap.c	/^    void (*entry)(tState self); \/**<< State entry action *\/$/;"	m	struct:tState_s	file:
entry	snmpnetstat/inet.c	/^    unsigned int  entry;      \/* entry number in table *\/$/;"	m	struct:stat_table	file:
entry	snmpnetstat/inet6.c	/^    unsigned int entry;      \/* entry number in table *\/$/;"	m	struct:stat_table	file:
event_handler	snmptrapd_handlers.h	/^Netsnmp_Trap_Handler   event_handler;$/;"	v
exec_format1	snmptrapd_handlers.c	/^char *exec_format1   = NULL;$/;"	v
exec_format2	snmptrapd_handlers.c	/^char *exec_format2   = NULL;$/;"	v
exit	agentxtrap.c	/^    void (*exit)(tState self); \/**<< State exit action *\/$/;"	m	struct:tState_s	file:
exitval	snmptable.c	/^static int      exitval = 0;$/;"	v	file:
extra_columns	snmptable.c	/^static int      extra_columns = 0;$/;"	v	file:
fd_mask	snmptrapd.c	/^typedef long    fd_mask;$/;"	t	file:
field_separator	snmptable.c	/^static char    *field_separator = NULL;$/;"	v	file:
fields	snmptable.c	/^static int      fields;$/;"	v	file:
fileout	snmpdelta.c	/^int             deltat = 0, timestamp = 0, fileout = 0, dosum =$/;"	v
flags	snmptrapd_handlers.h	/^     int   flags;$/;"	m	struct:netsnmp_trapd_handler_s
flags	snmptrapd_sql.c	/^    u_int        flags;           \/* connection flags (none) *\/$/;"	m	struct:netsnmp_sql_globals_t	file:
fmt	snmptable.c	/^    char           *fmt;$/;"	m	struct:column	file:
forcepassphrase	encode_keychange.c	/^int             forcepassphrase = 0,    \/* Always prompt for passphrases. *\/$/;"	v
format	snmptrapd_handlers.h	/^     char *format;		\/* Formatting string *\/$/;"	m	struct:netsnmp_trapd_handler_s
forward_handler	snmptrapd_handlers.c	/^int   forward_handler( netsnmp_pdu           *pdu,$/;"	f
forward_handler	snmptrapd_handlers.h	/^Netsnmp_Trap_Handler   forward_handler;$/;"	v
free_config_pidFile	snmptrapd.c	/^free_config_pidFile(void)$/;"	f
free_trap1_fmt	snmptrapd_handlers.c	/^free_trap1_fmt(void)$/;"	f
free_trap2_fmt	snmptrapd_handlers.c	/^free_trap2_fmt(void)$/;"	f
free_trapd_address	snmptrapd.c	/^free_trapd_address(void)$/;"	f
gateway	snmpnetstat/route.c	/^    in_addr_t       gateway;$/;"	m	struct:route_entry	file:
get_USM_DH_key	snmpusm.c	/^get_USM_DH_key(netsnmp_variable_list *vars, netsnmp_variable_list *dhvar,$/;"	f
get_field_names	snmptable.c	/^get_field_names(void)$/;"	f
get_ifname	snmpnetstat/route.c	/^get_ifname(char *name, int ifIndex)$/;"	f
get_table_entries	snmptable.c	/^get_table_entries(netsnmp_session * ss)$/;"	f
get_user_passphrases	encode_keychange.c	/^get_user_passphrases(void)$/;"	f
getbulk_table_entries	snmptable.c	/^getbulk_table_entries(netsnmp_session * ss)$/;"	f
getdtablesize	snmptrapd.c	/^getdtablesize(void)$/;"	f
gethostent	snmpnetstat/winstub.c	/^gethostent(void)$/;"	f
getnetbyaddr	snmpnetstat/winstub.c	/^getnetbyaddr(long net, int type)$/;"	f
getnetent	snmpnetstat/winstub.c	/^getnetent(void)$/;"	f
getpass	encode_keychange.c	/^getpass(const char *prompt)$/;"	f
getprotoent	snmpnetstat/winstub.c	/^getprotoent(void)$/;"	f
getservent	snmpnetstat/winstub.c	/^getservent(void)$/;"	f
gflag	snmpnetstat/main.c	/^int	gflag;		\/* show group (multicast) routing or stats *\/$/;"	v
groups	snmptrapd_sql.c	/^    const char  *groups[3];$/;"	m	struct:netsnmp_sql_globals_t	file:
h_fn	snmpnetstat/winstub.c	/^static char    *h_fn, *s_fn, *n_fn;$/;"	v	file:
h_fp	snmpnetstat/winstub.c	/^static FILE    *h_fp, *s_fp, *p_fp, *n_fp;$/;"	v	file:
h_stay_open	snmpnetstat/winstub.c	/^static int      h_stay_open, s_stay_open, p_stay_open, n_stay_open;$/;"	v	file:
handle_agentx_response	agentxtrap.c	/^handle_agentx_response(int operation, netsnmp_session *sp, UNUSED int reqid,$/;"	f	file:
handler	snmptrapd_handlers.c	/^   netsnmp_trapd_handler **handler;$/;"	m	struct:netsnmp_handler_map_t	file:
handler	snmptrapd_handlers.h	/^     Netsnmp_Trap_Handler *handler;$/;"	m	struct:netsnmp_trapd_handler_s
handler_data	snmptrapd_handlers.h	/^     void *handler_data;$/;"	m	struct:netsnmp_trapd_handler_s
handlers	snmptrapd_handlers.c	/^static netsnmp_handler_map handlers[] = {$/;"	v	file:
headers_only	snmptable.c	/^static int      headers_only = 0;$/;"	v	file:
host	snmptrapd_sql.c	/^    char      *host;$/;"	m	struct:sql_buf_t	file:
host_len	snmptrapd_sql.c	/^    u_long     host_len;$/;"	m	struct:sql_buf_t	file:
host_name	snmptrapd_sql.c	/^    char        *host_name;       \/* server host (def=localhost) *\/$/;"	m	struct:netsnmp_sql_globals_t	file:
hrStorageAllocationUnits	snmpdf.c	/^    u_long          hrStorageAllocationUnits;$/;"	m	struct:hrStorageTable	file:
hrStorageDescr	snmpdf.c	/^    char           *hrStorageDescr;$/;"	m	struct:hrStorageTable	file:
hrStorageIndex	snmpdf.c	/^    u_long          hrStorageIndex;$/;"	m	struct:hrStorageTable	file:
hrStorageSize	snmpdf.c	/^    u_long          hrStorageSize;$/;"	m	struct:hrStorageTable	file:
hrStorageTable	snmpdf.c	/^struct hrStorageTable {$/;"	s	file:
hrStorageType	snmpdf.c	/^    oid            *hrStorageType;$/;"	m	struct:hrStorageTable	file:
hrStorageUsed	snmpdf.c	/^    u_long          hrStorageUsed;$/;"	m	struct:hrStorageTable	file:
hup_handler	snmptrapd.c	/^hup_handler(int sig)$/;"	f
icmp6_stats	snmpnetstat/inet6.c	/^icmp6_stats(const char *name)$/;"	f
icmp_stats	snmpnetstat/inet.c	/^icmp_stats(const char *name)$/;"	f
ifIndex	snmpnetstat/if.c	/^        int     ifIndex;$/;"	m	struct:iftot	file:
ifNumber	snmpnetstat/route.c	/^    int             ifNumber;$/;"	m	struct:route_entry	file:
ifindex	snmpnetstat/if.c	/^        unsigned int    ifindex;$/;"	m	struct:_if_info	file:
iflag	snmpnetstat/main.c	/^int	iflag;		\/* show interfaces *\/$/;"	v
iflist	snmpnetstat/route.c	/^struct iflist {$/;"	s	file:
ifname	snmpnetstat/route.c	/^    char            ifname[64];$/;"	m	struct:route_entry	file:
ift_co	snmpnetstat/if.c	/^	u_long	ift_co;			\/* collisions *\/$/;"	m	struct:iftot	file:
ift_dr	snmpnetstat/if.c	/^	u_long	ift_dr;			\/* drops *\/$/;"	m	struct:iftot	file:
ift_ib	snmpnetstat/if.c	/^	u_long	ift_ib;			\/* input bytes *\/$/;"	m	struct:iftot	file:
ift_ie	snmpnetstat/if.c	/^	u_long	ift_ie;			\/* input errors *\/$/;"	m	struct:iftot	file:
ift_ip	snmpnetstat/if.c	/^	u_long	ift_ip;			\/* input packets *\/$/;"	m	struct:iftot	file:
ift_name	snmpnetstat/if.c	/^	char	ift_name[128];		\/* interface name *\/$/;"	m	struct:iftot	file:
ift_ob	snmpnetstat/if.c	/^	u_long	ift_ob;			\/* output bytes *\/$/;"	m	struct:iftot	file:
ift_oe	snmpnetstat/if.c	/^	u_long	ift_oe;			\/* output errors *\/$/;"	m	struct:iftot	file:
ift_op	snmpnetstat/if.c	/^	u_long	ift_op;			\/* output packets *\/$/;"	m	struct:iftot	file:
iftot	snmpnetstat/if.c	/^struct	iftot {$/;"	s	file:
index	snmpnetstat/route.c	/^    int             index;$/;"	m	struct:iflist	file:
index_width	snmptable.c	/^static int      index_width = sizeof("index ") - 1;$/;"	v	file:
indices	snmptable.c	/^static char   **indices = NULL;$/;"	v	file:
inet6name	snmpnetstat/inet6.c	/^inet6name(const unsigned char *in6)$/;"	f
inet6print	snmpnetstat/inet6.c	/^inet6print(unsigned char *in6, int port, const char *proto, int local)$/;"	f
inet_lnaof	snmpnetstat/winstub.c	/^inet_lnaof(struct in_addr in)$/;"	f
inet_netof	snmpnetstat/winstub.c	/^inet_netof(struct in_addr in)$/;"	f
inetname	snmpnetstat/inet.c	/^inetname(struct in_addr *inp)$/;"	f
inetprint	snmpnetstat/inet.c	/^inetprint(struct in_addr *in, int port, const char *proto, int local)$/;"	f
info_oid	snmpdelta.c	/^    oid            *info_oid;$/;"	m	struct:varInfo	file:
inform	snmptrap.c	/^int             inform = 0;$/;"	v
init_netsnmp_trapd_auth	snmptrapd_auth.c	/^init_netsnmp_trapd_auth(void)$/;"	f
init_options	snmptrapd_log.c	/^init_options(options_type * options)$/;"	f	file:
input_variable	snmptest.c	/^input_variable(netsnmp_variable_list * vp)$/;"	f
instance	snmpnetstat/route.c	/^    oid             instance[4];$/;"	m	struct:route_entry	file:
interval	snmpnetstat/main.c	/^int	interval;	\/* repeat interval for i\/f stats *\/$/;"	v
intpr	snmpnetstat/if.c	/^intpr(int interval)$/;"	f
intrface	snmpnetstat/main.c	/^char	*intrface;	\/* desired i\/f for stats, or NULL for all i\/fs *\/$/;"	v
ip	snmpnetstat/if.c	/^        char            ip[128], route[128];$/;"	m	struct:_if_info	file:
ip6_stats	snmpnetstat/inet6.c	/^ip6_stats(const char *name)$/;"	f
ip6protox	snmpnetstat/main.c	/^struct protox ip6protox[] = {$/;"	v	typeref:struct:protox
ip_stats	snmpnetstat/inet.c	/^ip_stats(const char *name)$/;"	f
ipkts	snmpnetstat/if.c	/^        unsigned long   ipkts, opkts;  \/* Need to combine 2 MIB values *\/$/;"	m	struct:_if_info	file:
is_agent_cmd	snmptrapd_log.c	216;"	d	file:
is_auth_cmd	snmptrapd_log.c	238;"	d	file:
is_cur_time_cmd	snmptrapd_log.c	184;"	d	file:
is_fmt_cmd	snmptrapd_log.c	264;"	d	file:
is_numeric_cmd	snmptrapd_log.c	281;"	d	file:
is_open	agentxtrap.c	/^    int is_open; \/**<< If the connection is open in this state *\/$/;"	m	struct:tState_s	file:
is_pdu_ip_cmd	snmptrapd_log.c	227;"	d	file:
is_trap_cmd	snmptrapd_log.c	251;"	d	file:
is_up_time_cmd	snmptrapd_log.c	200;"	d	file:
keepSeconds	snmpdelta.c	/^int             keepSeconds = 0, peaks = 0;$/;"	v
knownname	snmpnetstat/main.c	/^knownname(const char *name)$/;"	f	file:
label	snmptable.c	/^    char           *label;$/;"	m	struct:column	file:
lastlookup	snmptrapd_auth.c	/^static int lastlookup;$/;"	v	file:
leading_zeroes	snmptrapd_log.c	/^    int             leading_zeroes;     \/* if true, display with leading zeroes *\/$/;"	m	struct:__anon3	file:
left_justify	snmptrapd_log.c	/^    int             left_justify;       \/* if true, left justify this field *\/$/;"	m	struct:__anon3	file:
left_justify_flag	snmptable.c	/^static const char    *left_justify_flag = "";$/;"	v	file:
length_ifInNUCastPkts	snmpstatus.c	/^size_t          length_ifInNUCastPkts =$/;"	v
length_ifInUCastPkts	snmpstatus.c	/^size_t          length_ifInUCastPkts =$/;"	v
length_ifOperStatus	snmpstatus.c	/^size_t          length_ifOperStatus =$/;"	v
length_ifOutNUCastPkts	snmpstatus.c	/^size_t          length_ifOutNUCastPkts =$/;"	v
length_ifOutUCastPkts	snmpstatus.c	/^size_t          length_ifOutUCastPkts =$/;"	v
length_ipInReceives	snmpstatus.c	/^size_t          length_ipInReceives =$/;"	v
length_ipOutRequests	snmpstatus.c	/^size_t          length_ipOutRequests =$/;"	v
length_sysDescr	snmpstatus.c	/^size_t          length_sysDescr = sizeof(objid_sysDescr) \/ sizeof(oid);$/;"	v
length_sysUpTime	snmpstatus.c	/^size_t          length_sysUpTime = sizeof(objid_sysUpTime) \/ sizeof(oid);$/;"	v
lflag	snmpnetstat/main.c	/^int	lflag;		\/* show routing table with use and ref *\/$/;"	v
local_passphrase_filename	encode_keychange.c	/^char           *local_passphrase_filename;$/;"	v
local_progname	encode_keychange.c	/^char           *local_progname;$/;"	v
localdebug	snmptable.c	/^static int      localdebug;$/;"	v	file:
logfile	snmptrapd.c	/^char           *logfile = NULL;$/;"	v
logged	snmptrapd_sql.c	/^    char       logged;$/;"	m	struct:sql_buf_t	file:
main	agentxtrap.c	/^main(int argc, char *argv[])$/;"	f
main	encode_keychange.c	/^main(int argc, char **argv)$/;"	f
main	snmpbulkget.c	/^main(int argc, char *argv[])$/;"	f
main	snmpbulkwalk.c	/^main(int argc, char *argv[])$/;"	f
main	snmpdelta.c	/^main(int argc, char *argv[])$/;"	f
main	snmpdf.c	/^main(int argc, char *argv[])$/;"	f
main	snmpget.c	/^main(int argc, char *argv[])$/;"	f
main	snmpgetnext.c	/^main(int argc, char *argv[])$/;"	f
main	snmpnetstat/main.c	/^main(int argc, char *argv[])$/;"	f
main	snmpset.c	/^main(int argc, char *argv[])$/;"	f
main	snmpstatus.c	/^main(int argc, char *argv[])$/;"	f
main	snmptable.c	/^main(int argc, char *argv[])$/;"	f
main	snmptest.c	/^main(int argc, char *argv[])$/;"	f
main	snmptls.c	/^main(int argc, char **argv)$/;"	f
main	snmptranslate.c	/^main(int argc, char *argv[])$/;"	f
main	snmptrap.c	/^main(int argc, char *argv[])$/;"	f
main	snmpusm.c	/^main(int argc, char *argv[])$/;"	f
main	snmpvacm.c	/^main(int argc, char *argv[])$/;"	f
main	snmpwalk.c	/^main(int argc, char *argv[])$/;"	f
main	sshtosnmp.c	/^main(int argc, char **argv) {$/;"	f
mask	snmpnetstat/route.c	/^    in_addr_t       mask;$/;"	m	struct:route_entry	file:
max	snmpdelta.c	/^    float           max;$/;"	m	struct:varInfo	file:
max_getbulk	snmpnetstat/main.c	/^int     max_getbulk = 32;  \/* specifies the max-repeaters value to use with GETBULK requests *\/$/;"	v
max_getbulk	snmptable.c	/^static int      max_getbulk = 10;$/;"	v	file:
max_repetitions	snmpbulkget.c	/^int             max_repetitions = 10;$/;"	v
max_width	snmptable.c	/^static int      max_width = 0;$/;"	v	file:
mflag	snmpnetstat/main.c	/^int	mflag;		\/* show memory stats *\/$/;"	v
msgid	snmptrapd_sql.c	/^    uint32_t   msgid;$/;"	m	struct:sql_buf_t	file:
mtu	snmpnetstat/if.c	/^        int             mtu;$/;"	m	struct:_if_info	file:
mysql_handler	snmptrapd_handlers.h	/^Netsnmp_Trap_Handler   mysql_handler;$/;"	v
mysql_handler	snmptrapd_sql.c	/^mysql_handler(netsnmp_pdu           *pdu,$/;"	f
n_fn	snmpnetstat/winstub.c	/^static char    *h_fn, *s_fn, *n_fn;$/;"	v	file:
n_fp	snmpnetstat/winstub.c	/^static FILE    *h_fp, *s_fp, *p_fp, *n_fp;$/;"	v	file:
n_stay_open	snmpnetstat/winstub.c	/^static int      h_stay_open, s_stay_open, p_stay_open, n_stay_open;$/;"	v	file:
name	agentxtrap.c	/^    const char* name; \/**<< Name of the current state *\/$/;"	m	struct:tState_s	file:
name	snmpbulkget.c	/^    oid             name[MAX_OID_LEN];$/;"	m	struct:nameStruct	file:
name	snmpbulkget.c	/^}              *name, *namep;$/;"	v	typeref:struct:nameStruct
name	snmpdelta.c	/^    char           *name;$/;"	m	struct:varInfo	file:
name	snmpnetstat/if.c	/^        char            name[128];$/;"	m	struct:_if_info	file:
name	snmpnetstat/route.c	/^    char            name[64];$/;"	m	struct:iflist	file:
name	snmptable.c	/^static oid      name[MAX_OID_LEN];$/;"	v	file:
name2protox	snmpnetstat/main.c	/^name2protox(const char *name)$/;"	f	file:
nameStruct	snmpbulkget.c	/^struct nameStruct {$/;"	s	file:
name_len	snmpbulkget.c	/^    size_t          name_len;$/;"	m	struct:nameStruct	file:
name_length	snmptable.c	/^static size_t   name_length;$/;"	v	file:
namep	snmpbulkget.c	/^}              *name, *namep;$/;"	v	typeref:struct:nameStruct
names	snmpbulkget.c	/^int             names;$/;"	v
netname	snmpnetstat/route.c	/^netname(in_addr_t in, in_addr_t mask)$/;"	f
netname6	snmpnetstat/route.c	/^netname6(struct sockaddr_in6 *sa6, struct in6_addr *mask)$/;"	f
netsnmp_add_default_traphandler	snmptrapd_handlers.c	/^netsnmp_add_default_traphandler(Netsnmp_Trap_Handler *handler) {$/;"	f
netsnmp_add_global_traphandler	snmptrapd_handlers.c	/^netsnmp_add_global_traphandler(int list, Netsnmp_Trap_Handler *handler)$/;"	f
netsnmp_add_traphandler	snmptrapd_handlers.c	/^netsnmp_add_traphandler(Netsnmp_Trap_Handler* handler,$/;"	f
netsnmp_auth_global_traphandlers	snmptrapd_handlers.c	/^netsnmp_trapd_handler *netsnmp_auth_global_traphandlers   = NULL;$/;"	v
netsnmp_default_traphandlers	snmptrapd_handlers.c	/^netsnmp_trapd_handler *netsnmp_default_traphandlers  = NULL;$/;"	v
netsnmp_get_traphandler	snmptrapd_handlers.c	/^netsnmp_get_traphandler( oid *trapOid, int trapOidLen ) {$/;"	f
netsnmp_handler_map	snmptrapd_handlers.c	/^} netsnmp_handler_map;$/;"	t	typeref:struct:netsnmp_handler_map_t	file:
netsnmp_handler_map_t	snmptrapd_handlers.c	/^typedef struct netsnmp_handler_map_t {$/;"	s	file:
netsnmp_mysql_bind	snmptrapd_sql.c	/^netsnmp_mysql_bind(const char *text, size_t text_size, MYSQL_STMT **stmt,$/;"	f	file:
netsnmp_mysql_cleanup	snmptrapd_sql.c	/^netsnmp_mysql_cleanup(void)$/;"	f	file:
netsnmp_mysql_connect	snmptrapd_sql.c	/^netsnmp_mysql_connect(void)$/;"	f	file:
netsnmp_mysql_init	snmptrapd_sql.c	/^netsnmp_mysql_init(void)$/;"	f
netsnmp_post_global_traphandlers	snmptrapd_handlers.c	/^netsnmp_trapd_handler *netsnmp_post_global_traphandlers   = NULL;$/;"	v
netsnmp_pre_global_traphandlers	snmptrapd_handlers.c	/^netsnmp_trapd_handler *netsnmp_pre_global_traphandlers    = NULL;$/;"	v
netsnmp_specific_traphandlers	snmptrapd_handlers.c	/^netsnmp_trapd_handler *netsnmp_specific_traphandlers = NULL;$/;"	v
netsnmp_sql_disconnected	snmptrapd_sql.c	/^netsnmp_sql_disconnected(void)$/;"	f	file:
netsnmp_sql_error	snmptrapd_sql.c	/^netsnmp_sql_error(const char *message)$/;"	f	file:
netsnmp_sql_globals	snmptrapd_sql.c	/^} netsnmp_sql_globals;$/;"	t	typeref:struct:netsnmp_sql_globals_t	file:
netsnmp_sql_globals_t	snmptrapd_sql.c	/^typedef struct netsnmp_sql_globals_t {$/;"	s	file:
netsnmp_sql_stmt_error	snmptrapd_sql.c	/^netsnmp_sql_stmt_error (MYSQL_STMT *stmt, const char *message)$/;"	f	file:
netsnmp_trapd_auth	snmptrapd_auth.c	/^netsnmp_trapd_auth(netsnmp_pdu           *pdu,$/;"	f
netsnmp_trapd_check_auth	snmptrapd_auth.c	/^netsnmp_trapd_check_auth(int authtypes)$/;"	f
netsnmp_trapd_handler	snmptrapd_handlers.h	/^typedef struct netsnmp_trapd_handler_s netsnmp_trapd_handler;$/;"	t	typeref:struct:netsnmp_trapd_handler_s
netsnmp_trapd_handler_s	snmptrapd_handlers.h	/^struct netsnmp_trapd_handler_s {$/;"	s
newpass	encode_keychange.c	/^char           *newpass = NULL, *oldpass = NULL;$/;"	v
next	snmpnetstat/if.c	/^        struct _if_info *next;$/;"	m	struct:_if_info	typeref:struct:_if_info::_if_info	file:
next	snmpnetstat/route.c	/^    struct iflist  *next;$/;"	m	struct:iflist	typeref:struct:iflist::iflist	file:
next_state	agentxtrap.c	/^static tState next_state; \/**<< Next state of the state machine *\/$/;"	v	file:
nexth	snmptrapd_handlers.h	/^     netsnmp_trapd_handler *nexth;	\/* Next handler for this trap *\/$/;"	m	struct:netsnmp_trapd_handler_s
nextt	snmptrapd_handlers.h	/^     netsnmp_trapd_handler *nextt;$/;"	m	struct:netsnmp_trapd_handler_s
nflag	snmpnetstat/main.c	/^int	nflag;		\/* show addresses numerically *\/$/;"	v
no_headers	snmptable.c	/^static int      no_headers = 0;$/;"	v	file:
non_repeaters	snmpbulkget.c	/^int             non_repeaters = 0;$/;"	v
non_reps	snmpbulkwalk.c	/^int             reps = 10, non_reps = 0;$/;"	v
notification_handler	snmptrapd_handlers.c	/^int   notification_handler(netsnmp_pdu           *pdu,$/;"	f
notification_handler	snmptrapd_handlers.h	/^Netsnmp_Trap_Handler   notification_handler;$/;"	v
nsVacmContextPfx	snmpvacm.c	/^static oid nsVacmContextPfx[MAX_OID_LEN]  = { NSVACMACCESSTABLE, 1, 2 };$/;"	v	file:
nsVacmRowStatus	snmpvacm.c	/^static oid nsVacmRowStatus[MAX_OID_LEN]   = { NSVACMACCESSTABLE, 1, 5 };$/;"	v	file:
nsVacmViewName	snmpvacm.c	/^static oid nsVacmViewName[MAX_OID_LEN]    = { NSVACMACCESSTABLE, 1, 3 };$/;"	v	file:
numprinted	snmpbulkwalk.c	/^int             numprinted = 0;$/;"	v
numprinted	snmpwalk.c	/^int             numprinted = 0;$/;"	v
objid_enterprise	snmptrap.c	/^oid             objid_enterprise[] = { 1, 3, 6, 1, 4, 1, 3, 1, 1 };$/;"	v
objid_ifInNUCastPkts	snmpstatus.c	/^oid             objid_ifInNUCastPkts[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 12 };$/;"	v
objid_ifInUCastPkts	snmpstatus.c	/^oid             objid_ifInUCastPkts[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 11 };$/;"	v
objid_ifOperStatus	snmpstatus.c	/^oid             objid_ifOperStatus[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 8 };$/;"	v
objid_ifOutNUCastPkts	snmpstatus.c	/^oid             objid_ifOutNUCastPkts[] =$/;"	v
objid_ifOutUCastPkts	snmpstatus.c	/^oid             objid_ifOutUCastPkts[] = { 1, 3, 6, 1, 2, 1, 2, 2, 1, 17 };$/;"	v
objid_ipInReceives	snmpstatus.c	/^oid             objid_ipInReceives[] = { 1, 3, 6, 1, 2, 1, 4, 3, 0 };$/;"	v
objid_ipOutRequests	snmpstatus.c	/^oid             objid_ipOutRequests[] = { 1, 3, 6, 1, 2, 1, 4, 10, 0 };$/;"	v
objid_mib	snmpbulkget.c	/^oid             objid_mib[] = { 1, 3, 6, 1, 2, 1 };$/;"	v
objid_mib	snmpbulkwalk.c	/^oid             objid_mib[] = { 1, 3, 6, 1, 2, 1 };$/;"	v
objid_mib	snmpwalk.c	/^oid             objid_mib[] = { 1, 3, 6, 1, 2, 1 };$/;"	v
objid_snmptrap	snmptrap.c	/^oid             objid_snmptrap[] = { 1, 3, 6, 1, 6, 3, 1, 1, 4, 1, 0 };$/;"	v
objid_sysDescr	snmpstatus.c	/^oid             objid_sysDescr[] = { 1, 3, 6, 1, 2, 1, 1, 1, 0 };$/;"	v
objid_sysUpTime	snmpstatus.c	/^oid             objid_sysUpTime[] = { 1, 3, 6, 1, 2, 1, 1, 3, 0 };$/;"	v
objid_sysdescr	snmptrap.c	/^oid             objid_sysdescr[] = { 1, 3, 6, 1, 2, 1, 1, 1, 0 };$/;"	v
objid_sysuptime	snmptrap.c	/^oid             objid_sysuptime[] = { 1, 3, 6, 1, 2, 1, 1, 3, 0 };$/;"	v
oflag	snmpnetstat/main.c	/^int	oflag;		\/* Open\/Net-BSD style octet output *\/$/;"	v
oid	snmptrapd_sql.c	/^    char      *oid;$/;"	m	struct:sql_buf_t	file:
oid	snmptrapd_sql.c	/^    char      *oid;$/;"	m	struct:sql_vb_buf_t	file:
oid_len	snmptrapd_sql.c	/^    u_long     oid_len;$/;"	m	struct:sql_buf_t	file:
oid_len	snmptrapd_sql.c	/^    u_long     oid_len;$/;"	m	struct:sql_vb_buf_t	file:
oidlen	snmpdelta.c	/^    size_t          oidlen;$/;"	m	struct:varInfo	file:
oldpass	encode_keychange.c	/^char           *newpass = NULL, *oldpass = NULL;$/;"	v
operstatus	snmpnetstat/if.c	/^        int             operstatus;$/;"	m	struct:_if_info	file:
opkts	snmpnetstat/if.c	/^        unsigned long   ipkts, opkts;  \/* Need to combine 2 MIB values *\/$/;"	m	struct:_if_info	file:
optProc	snmpbulkget.c	/^optProc(int argc, char *const *argv, int opt)$/;"	f	file:
optProc	snmpbulkwalk.c	/^optProc(int argc, char *const *argv, int opt)$/;"	f	file:
optProc	snmpdelta.c	/^optProc(int argc, char *const *argv, int opt)$/;"	f	file:
optProc	snmpdf.c	/^optProc(int argc, char *const *argv, int opt)$/;"	f	file:
optProc	snmpget.c	/^optProc(int argc, char *const *argv, int opt)$/;"	f	file:
optProc	snmpgetnext.c	/^optProc(int argc, char *const *argv, int opt)$/;"	f	file:
optProc	snmpnetstat/main.c	/^optProc( int argc, char *const *argv, int opt )$/;"	f	file:
optProc	snmpset.c	/^optProc(int argc, char *const *argv, int opt)$/;"	f	file:
optProc	snmpstatus.c	/^optProc(int argc, char *const *argv, int opt)$/;"	f	file:
optProc	snmptable.c	/^optProc(int argc, char *const *argv, int opt)$/;"	f	file:
optProc	snmptls.c	/^optProc(int argc, char *const *argv, int opt)$/;"	f	file:
optProc	snmptrap.c	/^optProc(int argc, char *const *argv, int opt)$/;"	f	file:
optProc	snmpusm.c	/^optProc(int argc, char *const *argv, int opt)$/;"	f	file:
optProc	snmpvacm.c	/^optProc(int argc, char *const *argv, int opt)$/;"	f	file:
optProc	snmpwalk.c	/^optProc(int argc, char *const *argv, int opt)$/;"	f	file:
options_type	snmptrapd_log.c	/^} options_type;$/;"	t	typeref:struct:__anon3	file:
ownAuthKeyOid	snmpusm.c	/^ownAuthKeyOid[MAX_OID_LEN] = {1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 7},$/;"	v	file:
ownPrivKeyOid	snmpusm.c	/^ownPrivKeyOid[MAX_OID_LEN] = {1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 10},$/;"	v	file:
p_fn	snmpnetstat/winstub.c	/^static char    *p_fn;$/;"	v	file:
p_fp	snmpnetstat/winstub.c	/^static FILE    *h_fp, *s_fp, *p_fp, *n_fp;$/;"	v	file:
p_rtnode	snmpnetstat/route.c	/^p_rtnode( struct route_entry *rp )$/;"	f
p_stay_open	snmpnetstat/winstub.c	/^static int      h_stay_open, s_stay_open, p_stay_open, n_stay_open;$/;"	v	file:
packetid	agentxtrap.c	/^static long         packetid = 0;$/;"	v	file:
paramsChg	snmptls.c	/^const oid paramsChg[] = { SNMP_TLS_TM_PARAMS_CHANGED };$/;"	v
paramsNum	snmptls.c	/^const oid paramsNum[] = { SNMP_TLS_TM_PARAMS_COUNT };$/;"	v
paramsTbl	snmptls.c	/^const oid paramsTbl[] = { SNMP_TLS_TM_PARAMS_TABLE };$/;"	v
params_row_create	snmptls.c	/^params_row_create(const char *param_name, int hash_type, const char *fp,$/;"	f
parse_chr_type	snmptrapd_log.c	/^} parse_chr_type;$/;"	t	typeref:enum:__anon4	file:
parse_config_agentgroup	snmptrapd.c	/^parse_config_agentgroup(const char *token, char *cptr)$/;"	f
parse_config_agentuser	snmptrapd.c	/^parse_config_agentuser(const char *token, char *cptr)$/;"	f
parse_config_doNotFork	snmptrapd.c	/^parse_config_doNotFork(const char *token, char *cptr)$/;"	f
parse_config_doNotLogTraps	snmptrapd.c	/^parse_config_doNotLogTraps(const char *token, char *cptr)$/;"	f
parse_config_ignoreAuthFailure	snmptrapd.c	/^parse_config_ignoreAuthFailure(const char *token, char *cptr)$/;"	f
parse_config_outputOption	snmptrapd.c	/^parse_config_outputOption(const char *token, char *cptr)$/;"	f
parse_config_pidFile	snmptrapd.c	/^parse_config_pidFile(const char *token, char *cptr)$/;"	f
parse_format	snmptrapd_handlers.c	/^parse_format(const char *token, char *line)$/;"	f
parse_forward	snmptrapd_handlers.c	/^parse_forward(const char *token, char *line)$/;"	f	file:
parse_state_type	snmptrapd_log.c	/^} parse_state_type;$/;"	t	typeref:enum:__anon5	file:
parse_trap1_fmt	snmptrapd_handlers.c	/^parse_trap1_fmt(const char *token, char *line)$/;"	f	file:
parse_trap2_fmt	snmptrapd_handlers.c	/^parse_trap2_fmt(const char *token, char *line)$/;"	f	file:
parse_trapd_address	snmptrapd.c	/^parse_trapd_address(const char *token, char *cptr)$/;"	f
password	snmptrapd_sql.c	/^    char        *password;        \/* password (def=none) *\/$/;"	m	struct:netsnmp_sql_globals_t	file:
pdu	agentxtrap.c	/^static netsnmp_pdu *pdu = NULL; \/**<< The trap pdu that is to be sent *\/$/;"	v	file:
pdu_create_opt_context	agentxtrap.c	/^pdu_create_opt_context(int command, const char* context, size_t len)$/;"	f	file:
peak	snmpdelta.c	/^    float           peak;$/;"	m	struct:varInfo	file:
peak_average	snmpdelta.c	/^    float           peak_average;$/;"	m	struct:varInfo	file:
peak_count	snmpdelta.c	/^    int             peak_count;$/;"	m	struct:varInfo	file:
peaks	snmpdelta.c	/^int             keepSeconds = 0, peaks = 0;$/;"	v
period	snmpdelta.c	/^int             period = 1;$/;"	v
pflag	snmpnetstat/main.c	/^int	pflag;		\/* show given protocol *\/$/;"	v
pid_file	snmptrapd.c	/^    char           *pid_file = NULL;$/;"	v
plural	snmpnetstat/main.c	/^plural(int n)$/;"	f
port_num	snmptrapd_sql.c	/^    u_int        port_num;        \/* port number (built-in value) *\/$/;"	m	struct:netsnmp_sql_globals_t	file:
pr_cblocks	snmpnetstat/main.c	/^	stringfun	*pr_cblocks;	\/* control blocks printing routine *\/$/;"	m	struct:protox	file:
pr_name	snmpnetstat/main.c	/^	const char	*pr_name;	\/* well-known name *\/$/;"	m	struct:protox	file:
pr_rthdr	snmpnetstat/route.c	/^pr_rthdr(int af)$/;"	f
pr_stats	snmpnetstat/main.c	/^	stringfun	*pr_stats;	\/* statistics printing routine *\/$/;"	m	struct:protox	file:
pr_wanted	snmpnetstat/main.c	/^	int		pr_wanted;	\/* 1 if wanted, 0 otherwise *\/$/;"	m	struct:protox	file:
pre_env	snmpnetstat/winstub.c	/^pre_env(void)$/;"	f	file:
pre_env_done	snmpnetstat/winstub.c	/^static int      pre_env_done = 0;$/;"	v	file:
pre_parse	snmptrapd.c	/^pre_parse(netsnmp_session * session, netsnmp_transport *transport,$/;"	f	file:
precision	snmptrapd_log.c	/^    int             precision;  \/* the field's precision *\/$/;"	m	struct:__anon3	file:
prevt	snmptrapd_handlers.h	/^     netsnmp_trapd_handler *prevt;$/;"	m	struct:netsnmp_trapd_handler_s
print_format1	snmptrapd_handlers.c	/^char *print_format1  = NULL;$/;"	v
print_format2	snmptrapd_handlers.c	/^char *print_format2  = NULL;$/;"	v
print_handler	snmptrapd_handlers.c	/^int   print_handler(   netsnmp_pdu           *pdu,$/;"	f
print_handler	snmptrapd_handlers.h	/^Netsnmp_Trap_Handler   print_handler;$/;"	v
print_log	snmpdelta.c	/^print_log(char *file, char *message)$/;"	f
print_table	snmptable.c	/^print_table(void)$/;"	f
printmax	snmpdelta.c	/^    0, printmax = 0;$/;"	v
printproto	snmpnetstat/main.c	/^printproto(struct protox *tp, const char *name)$/;"	f	file:
privKeyChange	snmpusm.c	/^oid            *authKeyChange = authKeyOid, *privKeyChange = privKeyOid;$/;"	v	file:
privKeyOid	snmpusm.c	/^privKeyOid[MAX_OID_LEN] = {1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 9},$/;"	v	file:
processFileArgs	snmpdelta.c	/^processFileArgs(char *fileName)$/;"	f
progname	snmpnetstat/main.c	/^char    *progname = NULL;$/;"	v
promptindicator	encode_keychange.c	/^                promptindicator = 1,    \/* Output an indicator that input$/;"	v
proto	snmpnetstat/route.c	/^    int             proto;$/;"	m	struct:route_entry	file:
protoprotox	snmpnetstat/main.c	/^struct protox *protoprotox[] = {$/;"	v	typeref:struct:protox
protox	snmpnetstat/main.c	/^struct protox {$/;"	s	file:
protox	snmpnetstat/main.c	/^} protox[] = {$/;"	v	typeref:struct:protox
qflag	snmpnetstat/main.c	/^int	qflag;		\/* only display non-zero values for output *\/$/;"	v
queue	snmptrapd_sql.c	/^    netsnmp_container *queue;     \/* container; traps pending database write *\/$/;"	m	struct:netsnmp_sql_globals_t	file:
queue_interval	snmptrapd_sql.c	/^    int          queue_interval;  \/* auto save every N seconds *\/$/;"	m	struct:netsnmp_sql_globals_t	file:
queue_max	snmptrapd_sql.c	/^    u_int        queue_max;       \/* auto save queue when it gets this big *\/$/;"	m	struct:netsnmp_sql_globals_t	file:
quiet	snmpset.c	/^static int quiet = 0;$/;"	v	file:
rcsid	snmpnetstat/if.c	/^static char *rcsid = "$OpenBSD: if.c,v 1.42 2005\/03\/13 16:05:50 mpf Exp $";$/;"	v	file:
rcsid	snmpnetstat/inet.c	/^static const char *rcsid = "$OpenBSD: inet.c,v 1.92 2005\/02\/10 14:25:08 itojun Exp $";$/;"	v	file:
rcsid	snmpnetstat/main.c	/^static char *rcsid = "$OpenBSD: main.c,v 1.52 2005\/02\/10 14:25:08 itojun Exp $";$/;"	v	file:
rcsid	snmpnetstat/route.c	/^static char *rcsid = "$OpenBSD: route.c,v 1.66 2004\/11\/17 01:47:20 itojun Exp $";$/;"	v	file:
realloc_dispatch_format_cmd	snmptrapd_log.c	/^realloc_dispatch_format_cmd(u_char ** buf, size_t * buf_len,$/;"	f	file:
realloc_format_plain_trap	snmptrapd_log.c	/^realloc_format_plain_trap(u_char ** buf, size_t * buf_len,$/;"	f
realloc_format_trap	snmptrapd_log.c	/^realloc_format_trap(u_char ** buf, size_t * buf_len, size_t * out_len,$/;"	f
realloc_handle_auth_fmt	snmptrapd_log.c	/^realloc_handle_auth_fmt(u_char ** buf, size_t * buf_len, size_t * out_len,$/;"	f	file:
realloc_handle_backslash	snmptrapd_log.c	/^realloc_handle_backslash(u_char ** buf, size_t * buf_len, size_t * out_len,$/;"	f	file:
realloc_handle_ent_fmt	snmptrapd_log.c	/^realloc_handle_ent_fmt(u_char ** buf, size_t * buf_len, size_t * out_len,$/;"	f	file:
realloc_handle_ip_fmt	snmptrapd_log.c	/^realloc_handle_ip_fmt(u_char ** buf, size_t * buf_len, size_t * out_len,$/;"	f	file:
realloc_handle_time_fmt	snmptrapd_log.c	/^realloc_handle_time_fmt(u_char ** buf, size_t * buf_len, size_t * out_len,$/;"	f	file:
realloc_handle_trap_fmt	snmptrapd_log.c	/^realloc_handle_trap_fmt(u_char ** buf, size_t * buf_len, size_t * out_len,$/;"	f	file:
realloc_handle_wrap_fmt	snmptrapd_log.c	/^realloc_handle_wrap_fmt(u_char ** buf, size_t * buf_len, size_t * out_len,$/;"	f	file:
realloc_output_temp_bfr	snmptrapd_log.c	/^realloc_output_temp_bfr(u_char ** buf, size_t * buf_len, size_t * out_len,$/;"	f	file:
reconfig	snmptrapd.c	/^static int      reconfig = 0;$/;"	v	file:
reference	snmptrapd_log.c	292;"	d	file:
reps	snmpbulkwalk.c	/^int             reps = 10, non_reps = 0;$/;"	v
reqid	snmptrapd_sql.c	/^    uint32_t   reqid;$/;"	m	struct:sql_buf_t	file:
response	agentxtrap.c	/^    void (*response)(tState self, netsnmp_pdu *res);$/;"	m	struct:tState_s	file:
result	agentxtrap.c	/^static int          result = 1; \/**<< Program return value *\/$/;"	v	file:
reverse_fields	snmptable.c	/^reverse_fields(void)$/;"	f
rflag	snmpnetstat/main.c	/^int	rflag;		\/* show routing tables (or routing stats) *\/$/;"	v
root	snmptable.c	/^static oid      root[MAX_OID_LEN];$/;"	v	file:
rootlen	snmptable.c	/^static size_t   rootlen;$/;"	v	file:
route	snmpnetstat/if.c	/^        char            ip[128], route[128];$/;"	m	struct:_if_info	file:
route_entry	snmpnetstat/route.c	/^struct route_entry {$/;"	s	file:
routename	snmpnetstat/route.c	/^routename(in_addr_t in)$/;"	f
routename6	snmpnetstat/route.c	/^routename6(struct sockaddr_in6 *sa6)$/;"	f
routepr	snmpnetstat/route.c	/^routepr(void)$/;"	f
s_fn	snmpnetstat/winstub.c	/^static char    *h_fn, *s_fn, *n_fn;$/;"	v	file:
s_fp	snmpnetstat/winstub.c	/^static FILE    *h_fp, *s_fp, *p_fp, *n_fp;$/;"	v	file:
s_ibytes	snmpnetstat/if.c	/^        char            s_ibytes[20], s_obytes[20];$/;"	m	struct:_if_info	file:
s_ierrs	snmpnetstat/if.c	/^        char            s_ipkts[20], s_ierrs[20];$/;"	m	struct:_if_info	file:
s_ipkts	snmpnetstat/if.c	/^        char            s_ipkts[20], s_ierrs[20];$/;"	m	struct:_if_info	file:
s_obytes	snmpnetstat/if.c	/^        char            s_ibytes[20], s_obytes[20];$/;"	m	struct:_if_info	file:
s_oerrs	snmpnetstat/if.c	/^        char            s_opkts[20], s_oerrs[20];$/;"	m	struct:_if_info	file:
s_opkts	snmpnetstat/if.c	/^        char            s_opkts[20], s_oerrs[20];$/;"	m	struct:_if_info	file:
s_outq	snmpnetstat/if.c	/^        char            s_outq[20];$/;"	m	struct:_if_info	file:
s_rtflags	snmpnetstat/route.c	/^s_rtflags( struct route_entry *rp )$/;"	f
s_stay_open	snmpnetstat/winstub.c	/^static int      h_stay_open, s_stay_open, p_stay_open, n_stay_open;$/;"	v	file:
sav_int	snmpnetstat/if.c	/^static int      sav_int;$/;"	v	file:
sec2group_oid	snmpvacm.c	/^sec2group_oid(oid * it, size_t * len, int model, const char *name)$/;"	f
security_engine	snmptrapd_sql.c	/^    char      *security_engine;$/;"	m	struct:sql_buf_t	file:
security_engine_len	snmptrapd_sql.c	/^    u_long     security_engine_len;$/;"	m	struct:sql_buf_t	file:
security_level	snmptrapd_sql.c	/^    uint16_t   security_level, security_model;$/;"	m	struct:sql_buf_t	file:
security_model	snmptrapd_sql.c	/^    uint16_t   security_level, security_model;$/;"	m	struct:sql_buf_t	file:
security_name	snmptrapd_sql.c	/^    char      *security_name;$/;"	m	struct:sql_buf_t	file:
security_name_len	snmptrapd_sql.c	/^    u_long     security_name_len;$/;"	m	struct:sql_buf_t	file:
separator	snmptrapd_log.c	/^char            separator[32];$/;"	v
session	agentxtrap.c	/^static long         session;$/;"	v	file:
sessp	agentxtrap.c	/^static void        *sessp = NULL; \/**<< The current communication session *\/$/;"	v	file:
set_bits	snmpnetstat/route.c	/^    int             set_bits;$/;"	m	struct:route_entry	file:
sethostent	snmpnetstat/winstub.c	/^sethostent(int stay_open)$/;"	f
setnetent	snmpnetstat/winstub.c	/^setnetent(int stay_open)$/;"	f
setprotoent	snmpnetstat/winstub.c	/^setprotoent(int stay_open)$/;"	f
setservent	snmpnetstat/winstub.c	/^setservent(int stay_open)$/;"	f
setup_oid	snmpusm.c	/^setup_oid(oid * it, size_t * len, u_char * id, size_t idlen,$/;"	f
sflag	snmpnetstat/main.c	/^int	sflag;		\/* show protocol statistics *\/$/;"	v
show_all_matched_objects	snmptranslate.c	/^show_all_matched_objects(FILE * fp, const char *patmatch, oid * name, size_t * name_length, int f_desc, \/* non-zero if descriptions should be shown *\/$/;"	f
show_index	snmptable.c	/^static int      show_index = 0;$/;"	v	file:
sidewaysintpr	snmpnetstat/if.c	/^sidewaysintpr(unsigned int interval)$/;"	f	file:
signalled	snmpnetstat/if.c	/^int signalled;	\/* set if alarm goes off "early" *\/$/;"	v
snmp_get_and_print	snmpbulkwalk.c	/^snmp_get_and_print(netsnmp_session * ss, oid * theoid, size_t theoid_len)$/;"	f	file:
snmp_get_and_print	snmpwalk.c	/^snmp_get_and_print(netsnmp_session * ss, oid * theoid, size_t theoid_len)$/;"	f
snmp_getpassphrase	encode_keychange.c	/^snmp_getpassphrase(const char *prompt, int bvisible)$/;"	f
snmp_input	snmptrap.c	/^snmp_input(int operation,$/;"	f
snmp_input	snmptrapd_handlers.c	/^snmp_input(int op, netsnmp_session *session,$/;"	f
snmp_ttyecho	encode_keychange.c	/^snmp_ttyecho(const int fd, const int echo)$/;"	f
snmptrapd_add_session	snmptrapd.c	/^snmptrapd_add_session(netsnmp_transport *t)$/;"	f	file:
snmptrapd_close_sessions	snmptrapd.c	/^snmptrapd_close_sessions(netsnmp_session * sess_list)$/;"	f	file:
snmptrapd_free_traphandle	snmptrapd_handlers.c	/^snmptrapd_free_traphandle(void)$/;"	f
snmptrapd_main_loop	snmptrapd.c	/^snmptrapd_main_loop(void)$/;"	f	file:
snmptrapd_parse_traphandle	snmptrapd_handlers.c	/^snmptrapd_parse_traphandle(const char *token, char *line)$/;"	f
snmptrapd_register_configs	snmptrapd_handlers.c	/^snmptrapd_register_configs( void )$/;"	f
snmptrapd_register_sql_configs	snmptrapd_sql.c	/^snmptrapd_register_sql_configs( void )$/;"	f
socket_name	snmptrapd_sql.c	/^    char        *socket_name;     \/* socket name (built-in value) *\/$/;"	m	struct:netsnmp_sql_globals_t	file:
spoiled	snmpdelta.c	/^    int             spoiled;$/;"	m	struct:varInfo	file:
sprint_descriptor	snmpdelta.c	/^sprint_descriptor(char *buffer, struct varInfo *vip)$/;"	f
sql_buf	snmptrapd_sql.c	/^} sql_buf;$/;"	t	typeref:struct:sql_buf_t	file:
sql_buf_t	snmptrapd_sql.c	/^typedef struct sql_buf_t {$/;"	s	file:
sql_vb_buf	snmptrapd_sql.c	/^} sql_vb_buf;$/;"	t	typeref:struct:sql_vb_buf_t	file:
sql_vb_buf_t	snmptrapd_sql.c	/^typedef struct sql_vb_buf_t {$/;"	s	file:
ss	snmpnetstat/main.c	/^netsnmp_session *ss;$/;"	v
stat_table	snmpnetstat/inet.c	/^struct stat_table {$/;"	s	file:
stat_table	snmpnetstat/inet6.c	/^struct stat_table {$/;"	s	file:
state	agentxtrap.c	/^static tState state; \/**<< Current state of the state machine *\/$/;"	v	file:
stringfun	snmpnetstat/main.c	/^typedef void (stringfun)(const char*);$/;"	t	file:
subid	snmptable.c	/^    oid             subid;$/;"	m	struct:column	file:
successNotes	snmpusm.c	/^static const char *successNotes[CMD_NUM] = {$/;"	v	file:
successNotes	snmpvacm.c	/^static const char *successNotes[CMD_NUM] = {$/;"	v	file:
sysUpTimeLen	snmpdelta.c	/^size_t          sysUpTimeLen = 9;$/;"	v
sysUpTimeOid	snmpdelta.c	/^oid             sysUpTimeOid[9] = { 1, 3, 6, 1, 2, 1, 1, 3, 0 };$/;"	v
syslog_format2	snmptrapd_handlers.c	/^char *syslog_format2 = NULL;$/;"	v
syslog_handler	snmptrapd_handlers.c	/^int   syslog_handler(  netsnmp_pdu           *pdu,$/;"	f
syslog_handler	snmptrapd_handlers.h	/^Netsnmp_Trap_Handler   syslog_handler;$/;"	v
tState	agentxtrap.c	/^typedef const struct tState_s* tState;$/;"	t	typeref:struct:tState_s	file:
tState_s	agentxtrap.c	/^struct tState_s {$/;"	s	file:
tableForm	snmpdelta.c	/^int             tableForm = 0;$/;"	v
table_name	snmptable.c	/^static char    *table_name;$/;"	v	file:
tcp6protopr	snmpnetstat/inet6.c	/^tcp6protopr(const char *name)$/;"	f
tcp6states	snmpnetstat/inet6.c	/^const char     *tcp6states[] = {$/;"	v
tcp_stats	snmpnetstat/inet.c	/^tcp_stats(const char *name)$/;"	f
tcpprotopr	snmpnetstat/inet.c	/^tcpprotopr(const char *name)$/;"	f
tcpprotopr_bulkget	snmpnetstat/inet.c	/^tcpprotopr_bulkget(const char *name, oid *root, size_t root_len)$/;"	f
tcpprotopr_get	snmpnetstat/inet.c	/^tcpprotopr_get(const char *name, oid *root, size_t root_len)$/;"	f	file:
tcpprotoprint_line	snmpnetstat/inet.c	/^tcpprotoprint_line(const char *name, netsnmp_variable_list *vp, int *first)$/;"	f	file:
tcpstates	snmpnetstat/inet.c	/^const char     *tcpstates[] = {$/;"	v
term_handler	snmptrapd.c	/^term_handler(int sig)$/;"	f
tflag	snmpnetstat/main.c	/^int	tflag;		\/* show i\/f watchdog timers *\/$/;"	v
time	snmpdelta.c	/^    time_t          time;$/;"	m	struct:varInfo	file:
time	snmptrapd_sql.c	/^    MYSQL_TIME time;$/;"	m	struct:sql_buf_t	file:
timeout	agentxtrap.c	/^    tState timeout;$/;"	m	struct:tState_s	file:
timerPause	snmpnetstat/if.c	/^timerPause(void)$/;"	f	file:
timerSet	snmpnetstat/if.c	/^timerSet(int interval_seconds)$/;"	f	file:
timestamp	snmpdelta.c	/^int             deltat = 0, timestamp = 0, fileout = 0, dosum =$/;"	v
timezup	snmpnetstat/if.c	/^static time_t   timezup;$/;"	v	file:
tlstmCertCommonName	snmptls.c	/^const oid tlstmCertCommonName[]    = { SNMP_TLS_TM_BASE, 1, 1, 6 };$/;"	v
tlstmCertSANAny	snmptls.c	/^const oid tlstmCertSANAny[]        = { SNMP_TLS_TM_BASE, 1, 1, 5 };$/;"	v
tlstmCertSANDNSName	snmptls.c	/^const oid tlstmCertSANDNSName[]    = { SNMP_TLS_TM_BASE, 1, 1, 3 };$/;"	v
tlstmCertSANIpAddress	snmptls.c	/^const oid tlstmCertSANIpAddress[]  = { SNMP_TLS_TM_BASE, 1, 1, 4 };$/;"	v
tlstmCertSANRFC822Name	snmptls.c	/^const oid tlstmCertSANRFC822Name[] = { SNMP_TLS_TM_BASE, 1, 1, 2 };$/;"	v
tlstmCertSpecified	snmptls.c	/^const oid tlstmCertSpecified[]     = { SNMP_TLS_TM_BASE, 1, 1, 1 };$/;"	v
token	snmptrapd_handlers.h	/^     char *token;		\/* Or an array of tokens? *\/$/;"	m	struct:netsnmp_trapd_handler_s
tp	snmpnetstat/main.c	/^struct protox *tp = NULL; \/* for printing cblocks & stats *\/$/;"	v	typeref:struct:protox
transform_type	encode_keychange.c	/^const oid      *transform_type = NULL;  \/* Type of HMAC hash to use.      *\/$/;"	v
transform_type_input	encode_keychange.c	/^char           *transform_type_input = NULL;$/;"	v
transport	snmptrapd_sql.c	/^    char      *transport;$/;"	m	struct:sql_buf_t	file:
transport_len	snmptrapd_sql.c	/^    u_long     transport_len;$/;"	m	struct:sql_buf_t	file:
trap1_fmt_str_remember	snmptrapd.c	/^char           *trap1_fmt_str_remember = NULL;$/;"	v
trap1_std_str	snmptrapd_handlers.c	/^const char     *trap1_std_str = "%.4y-%.2m-%.2l %.2h:%.2j:%.2k %B [%b] (via %A [%a]): %N\\n\\t%W Trap (%q) Uptime: %#T\\n%v\\n";$/;"	v
trap2_std_str	snmptrapd_handlers.c	/^const char     *trap2_std_str = "%.4y-%.2m-%.2l %.2h:%.2j:%.2k %B [%b]:\\n%v\\n";$/;"	v
trap_description	snmptrapd_handlers.c	/^trap_description(int trap)$/;"	f
trap_stmt	snmptrapd_sql.c	/^    MYSQL_STMT  *trap_stmt, *vb_stmt; \/* prepared statements *\/$/;"	m	struct:netsnmp_sql_globals_t	file:
trapd_status	snmptrapd.c	/^int             trapd_status = SNMPTRAPD_STOPPED;$/;"	v
trapd_update_config	snmptrapd.c	/^trapd_update_config(void)$/;"	f
trapoid	snmptrapd_handlers.h	/^     oid  *trapoid;$/;"	m	struct:netsnmp_trapd_handler_s
trapoid_len	snmptrapd_handlers.h	/^     int   trapoid_len;$/;"	m	struct:netsnmp_trapd_handler_s
type	snmpdelta.c	/^    int             type;$/;"	m	struct:varInfo	file:
type	snmpnetstat/route.c	/^    int             type;$/;"	m	struct:route_entry	file:
type	snmptrapd_sql.c	/^    uint16_t   type;$/;"	m	struct:sql_vb_buf_t	file:
type	snmptrapd_sql.c	/^    uint16_t   version, type;$/;"	m	struct:sql_buf_t	file:
ucd_mib	snmpdf.c	/^int             ucd_mib = 0;$/;"	v
udp6protopr	snmpnetstat/inet6.c	/^udp6protopr(const char *name)$/;"	f
udp_stats	snmpnetstat/inet.c	/^udp_stats(const char *name)$/;"	f
udpprotopr	snmpnetstat/inet.c	/^udpprotopr(const char *name)$/;"	f
unused	snmptrapd_sql.c	/^int unused;	\/* Suppress "empty translation unit" warning *\/$/;"	v
usage	agentxtrap.c	/^usage(const char* progname)$/;"	f	file:
usage	encode_keychange.c	/^usage(void)$/;"	f
usage	snmpbulkget.c	/^usage(void)$/;"	f
usage	snmpbulkwalk.c	/^usage(void)$/;"	f
usage	snmpdelta.c	/^usage(void)$/;"	f
usage	snmpdf.c	/^usage(void)$/;"	f
usage	snmpget.c	/^usage(void)$/;"	f
usage	snmpgetnext.c	/^usage(void)$/;"	f
usage	snmpnetstat/main.c	/^usage(void)$/;"	f	file:
usage	snmpset.c	/^usage(void)$/;"	f
usage	snmpstatus.c	/^usage(void)$/;"	f
usage	snmptable.c	/^usage(void)$/;"	f
usage	snmptest.c	/^usage(void)$/;"	f
usage	snmptls.c	/^usage(void)$/;"	f
usage	snmptranslate.c	/^usage(void)$/;"	f
usage	snmptrap.c	/^usage(void)$/;"	f
usage	snmptrapd.c	/^usage(void)$/;"	f
usage	snmpusm.c	/^usage(void)$/;"	f
usage	snmpvacm.c	/^usage(void)$/;"	f
usage	snmpwalk.c	/^usage(void)$/;"	f
usage_synopsis	encode_keychange.c	/^usage_synopsis(FILE * ofp)$/;"	f
usage_to_file	encode_keychange.c	/^usage_to_file(FILE * ofp)$/;"	f
use_getbulk	snmptable.c	/^static int      use_getbulk = 1;$/;"	v	file:
uselocalizedkey	snmpusm.c	/^int             doauthkey = 0, doprivkey = 0, uselocalizedkey = 0;$/;"	v
user	snmptrapd_sql.c	/^    char      *user;$/;"	m	struct:sql_buf_t	file:
user_len	snmptrapd_sql.c	/^    u_long     user_len;$/;"	m	struct:sql_buf_t	file:
user_name	snmptrapd_sql.c	/^    char        *user_name;       \/* username (def=login name) *\/$/;"	m	struct:netsnmp_sql_globals_t	file:
usmDHParameters	snmpusm.c	/^usmDHParameters[] = { 1,3,6,1,3,101,1,1,1,0 }$/;"	v	file:
usmDHParameters_len	snmpusm.c	/^size_t usmDHParameters_len = OID_LENGTH(usmDHParameters);$/;"	v
usmDHUserAuthKeyChange	snmpusm.c	/^usmDHUserAuthKeyChange[MAX_OID_LEN] = {1, 3, 6, 1, 3, 101, 1, 1, 2, 1, 1 },$/;"	v	file:
usmDHUserOwnAuthKeyChange	snmpusm.c	/^usmDHUserOwnAuthKeyChange[MAX_OID_LEN] = {1, 3, 6, 1, 3, 101, 1, 1, 2, 1, 2 },$/;"	v	file:
usmDHUserOwnPrivKeyChange	snmpusm.c	/^usmDHUserOwnPrivKeyChange[MAX_OID_LEN] = {1, 3, 6, 1, 3, 101, 1, 1, 2, 1, 4 },$/;"	v	file:
usmDHUserPrivKeyChange	snmpusm.c	/^usmDHUserPrivKeyChange[MAX_OID_LEN] = {1, 3, 6, 1, 3, 101, 1, 1, 2, 1, 3 },$/;"	v	file:
usmUserCloneFrom	snmpusm.c	/^usmUserCloneFrom[MAX_OID_LEN] = {1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 4},$/;"	v	file:
usmUserEngineID	snmpusm.c	/^u_char         *usmUserEngineID = NULL;$/;"	v
usmUserEngineIDLen	snmpusm.c	/^size_t          usmUserEngineIDLen = 0;$/;"	v
usmUserPublic	snmpusm.c	/^usmUserPublic[MAX_OID_LEN] = {1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 11},$/;"	v	file:
usmUserPublic_val	snmpusm.c	/^char           *usmUserPublic_val = NULL;$/;"	v
usmUserSecurityName	snmpusm.c	/^usmUserSecurityName[MAX_OID_LEN] = {1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 3},$/;"	v	file:
usmUserStatus	snmpusm.c	/^usmUserStatus[MAX_OID_LEN] = {1, 3, 6, 1, 6, 3, 15, 1, 2, 2, 1, 13},$/;"	v	file:
vacmAccessContextMatch	snmpvacm.c	/^1, 3, 6, 1, 6, 3, 16, 1, 2, 1, 5}, vacmAccessContextMatch[MAX_OID_LEN] = {$/;"	v	file:
vacmAccessNotifyViewName	snmpvacm.c	/^1, 3, 6, 1, 6, 3, 16, 1, 4, 1, 6}, vacmAccessNotifyViewName[MAX_OID_LEN] = {$/;"	v	file:
vacmAccessReadViewName	snmpvacm.c	/^1, 3, 6, 1, 6, 3, 16, 1, 4, 1, 4}, vacmAccessReadViewName[MAX_OID_LEN] = {$/;"	v	file:
vacmAccessStatus	snmpvacm.c	/^1, 3, 6, 1, 6, 3, 16, 1, 4, 1, 7}, vacmAccessStatus[MAX_OID_LEN] = {$/;"	v	file:
vacmAccessWriteViewName	snmpvacm.c	/^1, 3, 6, 1, 6, 3, 16, 1, 4, 1, 5}, vacmAccessWriteViewName[MAX_OID_LEN] = {$/;"	v	file:
vacmGroupName	snmpvacm.c	/^static oid      vacmGroupName[MAX_OID_LEN] =$/;"	v	file:
vacmSec2GroupStatus	snmpvacm.c	/^    vacmSec2GroupStatus[MAX_OID_LEN] = {$/;"	v	file:
vacmViewTreeFamilyMask	snmpvacm.c	/^1, 3, 6, 1, 6, 3, 16, 1, 4, 1, 9}, vacmViewTreeFamilyMask[MAX_OID_LEN] = {$/;"	v	file:
vacmViewTreeFamilyStatus	snmpvacm.c	/^    vacmViewTreeFamilyStatus[MAX_OID_LEN] = {$/;"	v	file:
vacmViewTreeFamilyType	snmpvacm.c	/^1, 3, 6, 1, 6, 3, 16, 1, 5, 2, 1, 3}, vacmViewTreeFamilyType[MAX_OID_LEN] = {$/;"	v	file:
val	snmptrapd_sql.c	/^    u_char    *val;$/;"	m	struct:sql_vb_buf_t	file:
val_len	snmptrapd_sql.c	/^    u_long     val_len;$/;"	m	struct:sql_vb_buf_t	file:
value	snmpdelta.c	/^    u_int           value;$/;"	m	struct:varInfo	file:
varInfo	snmpdelta.c	/^struct varInfo {$/;"	s	file:
varbinds	snmptrapd_sql.c	/^    netsnmp_container *varbinds;$/;"	m	struct:sql_buf_t	file:
varbindsPerPacket	snmpdelta.c	/^int             varbindsPerPacket = 60;$/;"	v
varinfo	snmpdelta.c	/^struct varInfo  varinfo[MAX_ARGS];$/;"	v	typeref:struct:varInfo
vb_stmt	snmptrapd_sql.c	/^    MYSQL_STMT  *trap_stmt, *vb_stmt; \/* prepared statements *\/$/;"	m	struct:netsnmp_sql_globals_t	file:
verbose	encode_keychange.c	/^                verbose = 0;    \/* Output progress to stderr.     *\/$/;"	v
version	snmptrapd.c	/^version(void)$/;"	f	file:
version	snmptrapd_handlers.h	/^     int   version;		\/* ??? *\/$/;"	m	struct:netsnmp_trapd_handler_s
version	snmptrapd_sql.c	/^    uint16_t   version, type;$/;"	m	struct:sql_buf_t	file:
vflag	snmpnetstat/main.c	/^int	vflag;		\/* be verbose *\/$/;"	v
viewTreeFamilyType	snmpvacm.c	/^int             viewTreeFamilyType = 1;$/;"	v
view_oid	snmpvacm.c	/^view_oid(oid * it, size_t * len, const char *viewName, char *viewSubtree)$/;"	f
visible	encode_keychange.c	/^                visible = 0,    \/* Echo passphrases to terminal.  *\/$/;"	v
wait_for_peak_start	snmpdelta.c	/^wait_for_peak_start(int period, int peak)$/;"	f
wait_for_period	snmpdelta.c	/^wait_for_period(int period)$/;"	f
width	snmptable.c	/^    int             width;$/;"	m	struct:column	file:
width	snmptrapd_log.c	/^    size_t          width;      \/* the field's minimum width *\/$/;"	m	struct:__anon3	file:
