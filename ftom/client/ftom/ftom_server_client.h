#ifndef	_FTOM_SERVER_CLIENT_H_
#define	_FTOM_SERVER_CLIENT_H_


#include "ftom.h"
#include "ftom_client.h"

typedef	FTM_VOID _PTR_	FTOM_SERVER_CLIENT_PTR;

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_CREATE)
(
	FTM_CHAR_PTR	pName,
	FTOM_SERVER_CLIENT_PTR _PTR_ ppClient
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_DESTROY)
(
	FTOM_SERVER_CLIENT_PTR _PTR_ ppClient
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_INIT)
(
	FTOM_SERVER_CLIENT_PTR	pClient
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_FINAL)
(
	FTOM_SERVER_CLIENT_PTR	pClient
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_START)
(
	FTOM_SERVER_CLIENT_PTR	pClient
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_STOP)
(
	FTOM_SERVER_CLIENT_PTR	pClient
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_IS_RUNNING)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTM_BOOL_PTR			pIsRunning
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_WAITING_FOR_FINISHED)
(
	FTOM_SERVER_CLIENT_PTR	pClient
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_CONFIG_LOAD)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTM_CONFIG_PTR			pConfig
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_CONFIG_SAVE)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTM_CONFIG_PTR			pConfig
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_CONFIG_SHOW)
(
	FTOM_SERVER_CLIENT_PTR	pClient
);


typedef	FTM_RET	(*FTOM_SERVER_CLIENT_SET_NOTIFY_CB)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTOM_CLIENT_NOTIFY_CB	fNotifyCB,
	FTM_VOID_PTR			pData
);

typedef	FTM_RET (*FTOM_SERVER_CLIENT_MESSAGE_SEND)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTOM_MSG_PTR			pBaseMsg
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_MESSAGE_PROCESS)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTOM_MSG_PTR			pmsg
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_CONNECT)
(
	FTOM_SERVER_CLIENT_PTR	pClient
);


typedef	FTM_RET	(*FTOM_SERVER_CLIENT_TRACE)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTM_BOOL				bTraceON
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_GATEWAY_UPDATE_STATUS)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTM_BOOL				bStatus
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_NODE_GET_COUNT)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTM_ULONG_PTR			pulCount
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_NODE_REGISTER)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTM_NODE_PTR			pNode
);
	
typedef	FTM_RET	(*FTOM_SERVER_CLIENT_NODE_UPDATE_STATUS)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTM_CHAR_PTR			pID,
	FTM_BOOL				bStatus
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_NODE_IS_EXIST)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTM_CHAR_PTR			pID
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_EP_GET_COUNT)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTM_ULONG_PTR			pulCount
);

typedef	FTM_RET	 (*FTOM_SERVER_CLIENT_EP_GET_EPID_AT)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTM_ULONG				ulIndex,
	FTM_CHAR_PTR			pBuff,
	FTM_ULONG				ulBuffLen
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_EP_REGISTER)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTM_EP_PTR			pEP
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_EP_IS_EXIST)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTM_CHAR_PTR			pEPID
);
	
typedef	FTM_RET	(*FTOM_SERVER_CLIENT_EP_UPDATE_STATUS)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTM_CHAR_PTR			pEPID,
	FTM_BOOL				bStatus
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_EP_DATA_GET_LAST_TIME)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTM_CHAR_PTR			pEPID,
	FTM_ULONG_PTR			pulLastTime
);

typedef	FTM_RET	(*FTOM_SERVER_CLIENT_EP_DATA_SEND)
(
	FTOM_SERVER_CLIENT_PTR	pClient,
	FTM_CHAR_PTR			pEPID,
	FTM_EP_DATA_PTR			pDatas,
	FTM_ULONG				ulCount
);

typedef	struct
{
	FTM_CHAR_PTR	pName;

	FTOM_SERVER_CLIENT_CREATE	fCreate;
	FTOM_SERVER_CLIENT_DESTROY	fDestroy;
	FTOM_SERVER_CLIENT_INIT		fInit;
	FTOM_SERVER_CLIENT_FINAL	fFinal;
	FTOM_SERVER_CLIENT_START	fStart;
	FTOM_SERVER_CLIENT_STOP		fStop;
	FTOM_SERVER_CLIENT_IS_RUNNING		fIsRunning;
	FTOM_SERVER_CLIENT_WAITING_FOR_FINISHED	fWaitingForFinished;

	FTOM_SERVER_CLIENT_CONFIG_LOAD		fConfigLoad;
	FTOM_SERVER_CLIENT_CONFIG_SAVE		fConfigSave;
	FTOM_SERVER_CLIENT_CONFIG_SHOW		fConfigShow;

	FTOM_SERVER_CLIENT_MESSAGE_SEND		fMessageSend;
	FTOM_SERVER_CLIENT_MESSAGE_PROCESS	fMessageProcess;

	FTOM_SERVER_CLIENT_SET_NOTIFY_CB	fSetNotifyCB;

	struct
	{
		FTOM_SERVER_CLIENT_GATEWAY_UPDATE_STATUS	fUpdateStatus;
	}	xGateway;

	struct
	{
		FTOM_SERVER_CLIENT_NODE_GET_COUNT	fGetCount;
		FTOM_SERVER_CLIENT_NODE_REGISTER	fRegister;
		FTOM_SERVER_CLIENT_NODE_UPDATE_STATUS	fUpdateStatus;
		FTOM_SERVER_CLIENT_NODE_IS_EXIST	fIsExist;
	}	xNode;

	struct
	{
		FTOM_SERVER_CLIENT_EP_GET_COUNT		fGetCount;
		FTOM_SERVER_CLIENT_EP_GET_EPID_AT	fGetEPIDAt;
		FTOM_SERVER_CLIENT_EP_REGISTER		fRegister;
		FTOM_SERVER_CLIENT_EP_IS_EXIST		fIsExist;
		FTOM_SERVER_CLIENT_EP_UPDATE_STATUS	fUpdateStatus;
		struct
		{
			FTOM_SERVER_CLIENT_EP_DATA_GET_LAST_TIME	fGetLastTime;
			FTOM_SERVER_CLIENT_EP_DATA_SEND		fSend;
		}	xData;	
	}	xEP;
} FTOM_SERVER_CLIENT_MODULE, _PTR_ FTOM_SERVER_CLIENT_MODULE_PTR; 

FTM_RET	FTOM_SERVER_CLIENT_getModule
(
	FTM_CHAR_PTR	pModule,
	FTOM_SERVER_CLIENT_MODULE_PTR _PTR_ ppModule
);


#endif

