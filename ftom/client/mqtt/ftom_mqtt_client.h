#ifndef	_FTOM_MQTT_CLIENT_H_
#define	_FTOM_MQTT_CLIENT_H_

#include "ftm.h"
#include "ftom.h"
#include <pthread.h>
#include <mosquitto.h>

#define	FTOM_MQTT_CLIENT_TOPIC_LENGTH				128
#define	FTOM_MQTT_CLIENT_MESSAGE_LENGTH				1024
#define	FTOM_MQTT_CLIENT_DEFAULT_BROKER				"127.0.0.1"
#define	FTOM_MQTT_CLIENT_DEFAULT_PORT				1883
#define	FTOM_MQTT_CLIENT_DEFAULT_RECONNECTION_TIME	5

#define	FTOM_MQTT_METHOD_REQ_TIME_SYNC				1
#define	FTOM_MQTT_METHOD_REQ_CONTROL_ACTUATOR		2
#define	FTOM_MQTT_METHOD_REQ_SET_PROPERTY			3
#define	FTOM_MQTT_METHOD_REQ_POWER_OFF				4
#define	FTOM_MQTT_METHOD_REQ_REBOOT					5
#define	FTOM_MQTT_METHOD_REQ_RESTART					6
#define	FTOM_MQTT_METHOD_REQ_SW_UPDATE				7
#define	FTOM_MQTT_METHOD_REQ_SW_INFO					8

#define	FTOM_MQTT_CLIENT_DEFAULT_CB_SET				1

struct FTOM_MQTT_CLIENT_CALLBACK_SET_STRUCT;

typedef	FTM_RET (*FTOM_MQTT_CLIENT_MESSAGE_CB)(FTM_VOID_PTR pObject, FTOM_MSG_PTR pMsg);

typedef	struct
{
	FTM_CHAR	pGatewayID[FTM_GWID_LEN+1];

	FTM_CHAR	pHost[FTM_HOST_LEN+1];
	FTM_UINT16	usPort;

	FTM_BOOL	bTLS;
	FTM_CHAR	pUserID[FTM_USER_ID_LEN+1];
	FTM_CHAR	pPasswd[FTM_PASSWD_LEN+1];

	FTM_CHAR	pCertFile[FTM_FILE_NAME_LEN+1];

	FTM_ULONG	ulRetryInterval;
}	FTOM_MQTT_CLIENT_CONFIG, _PTR_ FTOM_MQTT_CLIENT_CONFIG_PTR;

typedef	struct FTOM_MQTT_CLIENT_STRUCT
{
	FTOM_MQTT_CLIENT_CONFIG	xConfig;

	FTM_BOOL				bStop;
	FTM_BOOL				bConnected;
	pthread_t				xMain;

	pthread_t				xLinkManager;
	FTM_TIMER				xLinkTimer;

	FTM_CHAR				pDID[FTM_DID_LEN + 1];
	struct mosquitto _PTR_	pMosquitto;
	FTOM_MSG_QUEUE_PTR		pMsgQ;
	FTM_LIST_PTR			pPublishList;

	FTM_ULONG				ulNewSubscribe;
	FTM_LIST_PTR			pSubscribeList;

	FTOM_MQTT_CLIENT_MESSAGE_CB	fMessageCB;
	FTM_VOID_PTR			pMessageCBObject;

	FTM_VOID_PTR			pParent;

	struct FTOM_MQTT_CLIENT_CALLBACK_SET_STRUCT _PTR_ pCBSet;
}	FTOM_MQTT_CLIENT, _PTR_ FTOM_MQTT_CLIENT_PTR;

typedef	FTM_VOID (*FTOM_MOSQUITTO_CONNECT_CB)(struct mosquitto *mosq, void *pObj, int nResult);
typedef	FTM_VOID (*FTOM_MOSQUITTO_DISCONNECT_CB)(struct mosquitto *mosq, void *pObj, int nResult);
typedef	FTM_VOID (*FTOM_MOSQUITTO_PUBLISH_CB)(struct mosquitto *mosq, void *pObj, int nResult);
typedef	FTM_VOID (*FTOM_MOSQUITTO_MESSAGE_CB)(struct mosquitto *mosq, void *pObj, const struct mosquitto_message *message);
typedef FTM_VOID (*FTOM_MOSQUITTO_SUBSCRIBE_CB)(struct mosquitto *mosq, void *pObj, int nMID, int nQoS, const int *pGrantedQoS);
typedef FTM_VOID (*FTOM_MOSQUITTO_TIMER_CB)(struct mosquitto *mosq, void *pObj);

typedef FTM_RET	 (*FTOM_MQTT_CLIENT_GW_STATUS)
(
	FTOM_MQTT_CLIENT_PTR	pClient, 
	FTM_CHAR_PTR			pGatewayID,
	FTM_BOOL				bStatus,
	FTM_ULONG				ulTimeout
);

typedef FTM_RET	 (*FTOM_MQTT_CLIENT_EP_STATUS)
(
	FTOM_MQTT_CLIENT_PTR	pClient, 
	FTM_CHAR_PTR			pEPID,
	FTM_BOOL				bStatus,
	FTM_ULONG				ulTimeout
);

typedef FTM_RET	 (*FTOM_MQTT_CLIENT_EP_DATA)
(
	FTOM_MQTT_CLIENT_PTR	pClient, 
	FTM_CHAR_PTR			pEPID,
	FTM_EP_DATA_PTR		pData,
	FTM_ULONG			ulCount
);

typedef FTM_RET	 (*FTOM_MQTT_CLIENT_TP_RESPONSE)
(
	FTOM_MQTT_CLIENT_PTR	pClient, 
	FTM_CHAR_PTR			pMsgID,
	FTM_INT					nCode,
	FTM_CHAR_PTR			pMessage
);

typedef	struct
{
	FTM_INT			nMessageID;
	FTM_CHAR_PTR	pTopic;
	FTM_CHAR_PTR	pMessage;
	FTM_ULONG		ulMessageLen;
	FTM_ULONG		ulQoS;
	FTM_VOID_PTR	pData;
}	FTOM_MQTT_PUBLISH, _PTR_ FTOM_MQTT_PUBLISH_PTR;

typedef	struct
{
	FTM_INT			nMessageID;
	FTM_BOOL		bRegisted;
	FTM_CHAR_PTR	pTopic;
}	FTOM_MQTT_SUBSCRIBE, _PTR_ FTOM_MQTT_SUBSCRIBE_PTR;

typedef	struct FTOM_MQTT_CLIENT_CALLBACK_SET_STRUCT
{
	FTOM_MOSQUITTO_CONNECT_CB		fConnect;
	FTOM_MOSQUITTO_DISCONNECT_CB	fDisconnect;
	FTOM_MOSQUITTO_PUBLISH_CB		fPublish;
	FTOM_MOSQUITTO_MESSAGE_CB		fMessage;
	FTOM_MOSQUITTO_SUBSCRIBE_CB		fSubscribe;
	FTOM_MOSQUITTO_TIMER_CB			fTimer;
	FTOM_MQTT_CLIENT_GW_STATUS		fGWStatus;
	FTOM_MQTT_CLIENT_EP_STATUS		fEPStatus;
	FTOM_MQTT_CLIENT_EP_DATA		fEPData;
	FTOM_MQTT_CLIENT_TP_RESPONSE	fTPResponse;
}	FTOM_MQTT_CLIENT_CBSET, _PTR_ FTOM_MQTT_CLIENT_CBSET_PTR;

FTM_RET	FTOM_MQTT_CLIENT_create
(
	FTOM_MQTT_CLIENT_PTR _PTR_ ppClient
);

FTM_RET	FTOM_MQTT_CLIENT_destroy
(
	FTOM_MQTT_CLIENT_PTR _PTR_ ppClient
);

FTM_RET	FTOM_MQTT_CLIENT_init
(
	FTOM_MQTT_CLIENT_PTR pClient
);

FTM_RET	FTOM_MQTT_CLIENT_final
(
	FTOM_MQTT_CLIENT_PTR pClient
);

FTM_RET	FTOM_MQTT_CLIENT_setConfig
(
	FTOM_MQTT_CLIENT_PTR 		pClient, 
	FTOM_MQTT_CLIENT_CONFIG_PTR 	pConfig
);

FTM_RET	FTOM_MQTT_CLIENT_loadFromFile
(
	FTOM_MQTT_CLIENT_PTR pClient, 
	FTM_CHAR_PTR 		pFileName
);

FTM_RET	FTOM_MQTT_CLIENT_showConfig
(
	FTOM_MQTT_CLIENT_PTR pClient
);

FTM_RET	FTOM_MQTT_CLIENT_start
(
	FTOM_MQTT_CLIENT_PTR pClient
);

FTM_RET	FTOM_MQTT_CLIENT_stop
(
	FTOM_MQTT_CLIENT_PTR pClient
);

FTM_RET	FTOM_MQTT_CLIENT_isConnected
(
	FTOM_MQTT_CLIENT_PTR pClient,
	FTM_BOOL_PTR		 pbConnected
);

FTM_RET	FTOM_MQTT_CLIENT_setMessageCB
(
	FTOM_MQTT_CLIENT_PTR 	pClient, 
	FTOM_MQTT_CLIENT_MESSAGE_CB	fMessageCB,
	FTM_VOID_PTR			pData
);

FTM_RET	FTOM_MQTT_CLIENT_setCBSet
(
	FTOM_MQTT_CLIENT_PTR 	pClient, 
	FTOM_MQTT_CLIENT_CBSET_PTR	pSet
);

FTM_RET	FTOM_MQTT_CLIENT_setParent
(
	FTOM_MQTT_CLIENT_PTR	pClient,
	FTM_VOID_PTR			pParent
);

FTM_RET	FTOM_MQTT_CLIENT_notify
(
	FTOM_MQTT_CLIENT_PTR 	pClient, 
	FTOM_MSG_PTR 			pMsg
);

FTM_RET	FTOM_MQTT_CLIENT_subscribe
(
	FTOM_MQTT_CLIENT_PTR	pClient,
	FTM_CHAR_PTR			pTopic
);

FTM_RET	FTOM_MQTT_CLIENT_unsubscribe
(
	FTOM_MQTT_CLIENT_PTR	pClient,
	FTM_CHAR_PTR			pTopic
);

FTM_RET	FTOM_MQTT_CLIENT_publish
(
	FTOM_MQTT_CLIENT_PTR 	pClient, 
	FTM_CHAR_PTR			pTopic,
	FTM_CHAR_PTR			pMessage,
	FTM_ULONG				ulMessageLen,
	FTM_VOID_PTR			pData,
	FTM_ULONG_PTR			pulMessageID
);

FTM_RET	FTOM_MQTT_CLIENT_reportGWStatus
(
	FTOM_MQTT_CLIENT_PTR pClient,
	FTM_CHAR_PTR		pGatewayID,
	FTM_BOOL			bStatus,
	FTM_ULONG			ulTimeout
);

FTM_RET	FTOM_MQTT_CLIENT_publishEPStatus
(
	FTOM_MQTT_CLIENT_PTR pClient,
	FTM_CHAR_PTR		pEPID,
	FTM_BOOL			bStatus,
	FTM_ULONG			ulTimeout
);

FTM_RET	FTOM_MQTT_CLIENT_publishEPData
(
	FTOM_MQTT_CLIENT_PTR pClient,
	FTM_CHAR_PTR		pEPID,
	FTM_EP_DATA_PTR		pData,
	FTM_ULONG			ulCount
);

FTM_RET	FTOM_MQTT_CLIENT_response
(
	FTOM_MQTT_CLIENT_PTR pClient,
	FTM_CHAR_PTR		pMsgID,
	FTM_INT				nCode,
	FTM_CHAR_PTR		pMessage
);

FTM_RET	FTOM_MQTT_CLIENT_pushMsg
(
	FTOM_MQTT_CLIENT_PTR pClient,
	FTOM_MSG_PTR		pMsg	
);

FTM_RET	FTOM_MQTT_PUBLISH_create
(
	FTM_CHAR_PTR	pTopic,
	FTM_CHAR_PTR	pMessage,
	FTM_ULONG		ulMessageLen,
	FTM_ULONG		ulQoS,
	FTM_VOID_PTR	pData,
	FTOM_MQTT_PUBLISH_PTR _PTR_ ppPublish
);

FTM_RET	FTOM_MQTT_PUBLISH_destroy
(
	FTOM_MQTT_PUBLISH_PTR _PTR_ ppPublish
);

FTM_RET	FTOM_MQTT_SUBSCRIBE_create
(
	FTM_CHAR_PTR	pTopic,
	FTOM_MQTT_SUBSCRIBE_PTR _PTR_ ppSubscribe
);

FTM_RET	FTOM_MQTT_SUBSCRIBE_destroy
(
	FTOM_MQTT_SUBSCRIBE_PTR _PTR_ ppSubscribe
);

#endif
