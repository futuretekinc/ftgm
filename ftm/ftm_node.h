#ifndef	__FTM_NODE_H__
#define __FTM_NODE_H__

#include "ftm_types.h"

typedef	unsigned long	FTM_NODE_TYPE, _PTR_ FTM_NODE_TYPE_PTR;

#define	FTM_NODE_TYPE_SNMP 		 			0x00000101
#define	FTM_NODE_TYPE_MODBUS_OVER_TCP		0x00000102
#define	FTM_NODE_TYPE_MODBUS_OVER_SERIAL	0x00000202

typedef	unsigned long	FTM_NODE_FLAG, _PTR_ FTM_NODE_FLAG_PTR;
#define	FTM_NODE_FLAG_STATIC	(1 << 0)
#define	FTM_NODE_FLAG_LAST		(1 << 0)

typedef	struct
{
	FTM_ULONG	ulVersion;
	FTM_CHAR	pURL[FTM_URL_LEN + 1];
	FTM_CHAR	pCommunity[FTM_SNMP_COMMUNITY_LEN + 1];
	FTM_CHAR	pMIB[FTM_SNMP_MIB_LEN + 1];
	FTM_ULONG	ulMaxRetryCount;
}	FTM_NODE_OPT_SNMP, _PTR_ FTM_NODE_OPT_SNMP_PTR;

typedef struct
{
	FTM_ULONG	ulVersion;
	FTM_CHAR	pURL[FTM_URL_LEN + 1];
	FTM_CHAR	pTopic[FTM_MQTT_TOPIC_LEN + 1];
} 	FTM_NODE_OPT_MQTT, _PTR_ FTM_NODE_OPT_MQTT_PTR;

typedef struct
{
	FTM_ULONG	ulVersion;	
	FTM_CHAR	pDevice[FTM_DEVICE_NAME_LEN + 1];
} 	FTM_NODE_OPT_LORA, _PTR_ FTM_NODE_OPT_LORA_PTR;

typedef	struct 
{
	FTM_CHAR			pDID[FTM_DID_LEN + 1];
	FTM_NODE_TYPE		xType;
	FTM_NODE_FLAG		xFlags;
	FTM_CHAR			pLocation[FTM_LOCATION_LEN + 1];
	FTM_ULONG			ulInterval;
	FTM_ULONG			ulTimeout;
	union 
	{
		FTM_NODE_OPT_SNMP	xSNMP;
		FTM_NODE_OPT_MQTT	xMQTT;
		FTM_NODE_OPT_LORA	xLoRa;

	}					xOption;
}	FTM_NODE, _PTR_ FTM_NODE_PTR;

FTM_RET	FTM_NODE_create(FTM_NODE_PTR _PTR_ ppNode);
FTM_RET	FTM_NODE_destroy(FTM_NODE_PTR _PTR_ ppNode);

FTM_RET	FTM_NODE_isValid(FTM_NODE_PTR pNode);
FTM_RET FTM_NODE_isValidType(FTM_ULONG	xType);
FTM_RET	FTM_NODE_isValidTimeout(FTM_NODE_PTR pNode, FTM_ULONG ulTimeout);
FTM_RET	FTM_NODE_isValidSNMPOpt(FTM_NODE_PTR pNode, FTM_NODE_OPT_SNMP_PTR pOpts);

FTM_RET	FTM_NODE_isStatic(FTM_NODE_PTR pNode);

FTM_RET	FTM_NODE_setDefault(FTM_NODE_PTR pNode);
FTM_RET	FTM_NODE_setDID(FTM_NODE_PTR pNode, FTM_CHAR_PTR pDID);

FTM_CHAR_PTR	FTM_NODE_typeString(FTM_NODE_TYPE xType);
FTM_CHAR_PTR	FTM_NODE_flagString(FTM_NODE_FLAG xFlag);
#endif

