#ifndef	_FTM_LOG_H_
#define	_FTM_LOG_H_

#include "ftm_types.h"
#include "ftm_time.h"

typedef	enum	FTM_LOG_TYPE_ENUM
{
	FTM_LOG_TYPE_UNKNOWN,

	FTM_LOG_TYPE_CREATE_OBJECT,
	FTM_LOG_TYPE_CREATE_NODE,
	FTM_LOG_TYPE_CREATE_EP,
	FTM_LOG_TYPE_CREATE_TRIGGER,
	FTM_LOG_TYPE_CREATE_ACTION,
	FTM_LOG_TYPE_CREATE_RULE,

	FTM_LOG_TYPE_DESTROY_OBJECT,
	FTM_LOG_TYPE_DESTROY_NODE,
	FTM_LOG_TYPE_DESTROY_EP,
	FTM_LOG_TYPE_DESTROY_TRIGGER,
	FTM_LOG_TYPE_DESTROY_ACTION,

	FTM_LOG_TYPE_DESTROY_RULE,

	FTM_LOG_TYPE_EVENT
}	FTM_LOG_TYPE, _PTR_ FTM_LOG_TYPE_PTR;

#define	FTM_LOG_FLAG_SAVED	0x00000001

typedef	struct
{
	FTM_CHAR	pObjectID[FTM_ID_LEN+1];
}	FTM_LOG_CREATE_OBJECT_PARAMS, _PTR_ FTM_LOG_CREATE_OBJECT_PARAMS_PTR;

typedef	struct
{
	FTM_CHAR	pObjectID[FTM_ID_LEN+1];
}	FTM_LOG_DESTROY_OBJECT_PARAMS, _PTR_ FTM_LOG_DESTROY_OBJECT_PARAMS_PTR;

typedef	struct
{
	FTM_CHAR	pRuleID[FTM_ID_LEN+1];
	FTM_BOOL	bOccurred;
}	FTM_LOG_EVENT_PARAMS, _PTR_ FTM_LOG_EVENT_PARAMS_PTR;
	
typedef	struct FTM_LOG_ITEM_STRUCT
{
	FTM_UINT64		ullID;
	FTM_LOG_TYPE	xType;
	FTM_ULONG		ulTime;
	FTM_ULONG		xFlags;
	union
	{
		FTM_LOG_CREATE_OBJECT_PARAMS	xCreateObject;
		FTM_LOG_DESTROY_OBJECT_PARAMS	xdestroyObject;
		FTM_LOG_EVENT_PARAMS			xEvent;
	}	xParams;
}	FTM_LOG, _PTR_ FTM_LOG_PTR;

FTM_RET	FTM_LOG_create
(
	FTM_LOG_PTR _PTR_ ppLog
);

FTM_RET	FTM_LOG_destroy
(
	FTM_LOG_PTR _PTR_ ppLog
);

FTM_RET	FTM_LOG_createObject
(
	FTM_CHAR_PTR	pObjectID,
	FTM_LOG_PTR	_PTR_ ppLog
);

FTM_RET	FTM_LOG_createEvent
(
	FTM_CHAR_PTR	pObjectID,
	FTM_LOG_PTR	_PTR_ ppLog
);

#endif
