#ifndef	__FTNM_SNMP_CLIENT_H__
#define	__FTNM_SNMP_CLIENT_H__

#include "ftnm.h"
#include "ftnm_config.h"
#include "ftnm_node.h"

typedef	FTM_ULONG		FTNM_SNMPC_STATE, _PTR_ FTNM_SNMPC_STATE_PTR;

#define	FTNM_SNMPC_STATE_UNKNOWN		0x00000000
#define	FTNM_SNMPC_STATE_INITIALIZED	0x00000001
#define	FTNM_SNMPC_STATE_RUNNING		0x00000002
#define	FTNM_SNMPC_STATE_TIMEOUT		0x00000003
#define	FTNM_SNMPC_STATE_ERROR			0x00000004
#define	FTNM_SNMPC_STATE_COMPLETED		0x00000005

typedef	struct 
{
	FTNM_NODE			xCommon;

	FTNM_SNMPC_STATE		nState;
	FTNM_EP_PTR				pCurrentEP;
	struct snmp_session 	*pSession;		/* SNMP session data */
	struct 
	{
		FTM_ULONG				ulRequest;
		FTM_ULONG				ulResponse;
	}	xStatistics;	
}	FTNM_NODE_SNMPC, _PTR_ FTNM_NODE_SNMPC_PTR;

FTM_RET		FTNM_SNMPC_init(FTNM_CFG_SNMPC_PTR pConfig);

FTM_RET		FTNM_NODE_SNMPC_init(FTNM_NODE_SNMPC_PTR pNode);
FTM_RET		FTNM_NODE_SNMPC_final(FTNM_NODE_SNMPC_PTR pNode);
FTM_BOOL	FTNM_NODE_SNMPC_isRunning(FTNM_NODE_SNMPC_PTR pNode);

FTM_RET 	FTNM_NODE_SNMPC_startAsync(FTNM_NODE_SNMPC_PTR pNode);
FTM_RET 	FTNM_NODE_SNMPC_stop(FTNM_NODE_SNMPC_PTR pNode);
#endif

