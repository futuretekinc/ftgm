#ifndef	_FTNM_MSG_H_
#define	_FTNM_MSG_H_

#include "ftm.h"

#define	FTNM_MSG_STRING_LENGTH	1024
typedef	enum
{
	FTNM_MSG_TYPE_QUIT = 0,
	FTNM_MSG_TYPE_SNMPTRAP,
	FTNM_MSG_TYPE_EP_CHANGED,
	FTNM_MSG_TYPE_EP_DATA_UPDATED
}	FTNM_MSG_TYPE, _PTR_ FTNM_MSG_TYPE_PTR;

typedef	struct
{
	FTM_CHAR	pString[FTNM_MSG_STRING_LENGTH+1];	
}	FTNM_MSG_SNMPTRAP_PARAMS, _PTR_ FTNM_MSG_SNMPTRAP_PARAMS_PTR;

typedef struct
{
	FTM_EP_ID	xEPID;
	FTM_EP_DATA	xData;
}	FTNM_MSG_EP_CHANGED_PARAMS, _PTR_ FTNM_MSG_EP_CHANGED_PARAMS_PTR;

typedef struct
{
	FTM_EP_ID	xEPID;
	FTM_EP_DATA	xData;
}	FTNM_MSG_EP_DATA_UPDATED_PARAMS, _PTR_ FTNM_MSG_EP_DATA_UPDATED_PARAMS_PTR;

typedef	struct
{
	FTNM_MSG_TYPE	xType;
	union
	{
		FTNM_MSG_SNMPTRAP_PARAMS		xSNMPTrap;
		FTNM_MSG_EP_CHANGED_PARAMS		xEPChanged;
		FTNM_MSG_EP_DATA_UPDATED_PARAMS	xEPDataUpdated;
	}	xParams;
} FTNM_MSG, _PTR_ FTNM_MSG_PTR;

typedef struct
{
	FTM_MSG_QUEUE	xQueue;
} FTNM_MSG_QUEUE, _PTR_ FTNM_MSG_QUEUE_PTR;

FTM_RET	FTNM_MSG_create(FTNM_MSG_PTR _PTR_ ppMsg);
FTM_RET	FTNM_MSG_destroy(FTNM_MSG_PTR pMsg);

FTM_RET FTNM_MSGQ_init(FTNM_MSG_QUEUE_PTR pMsgQ);
FTM_RET FTNM_MSGQ_final(FTNM_MSG_QUEUE_PTR pMsgQ);

FTM_RET	FTNM_MSGQ_push(FTNM_MSG_QUEUE_PTR pMsgQ, FTNM_MSG_PTR pMsg);
FTM_RET	FTNM_MSGQ_pop(FTNM_MSG_QUEUE_PTR pMsgQ, FTNM_MSG_PTR _PTR_ ppMsg);
FTM_RET	FTNM_MSGQ_timedPop(FTNM_MSG_QUEUE_PTR pMsgQ, FTM_ULONG ulTimeout, FTNM_MSG_PTR _PTR_ ppMsg);
FTM_RET	FTNM_MSGQ_sendSNMPTrap(FTNM_MSG_QUEUE_PTR pMsgQ, FTM_CHAR_PTR pTrapMsg);
FTM_RET FTNM_MSGQ_sendEPChanged(FTNM_MSG_QUEUE_PTR pMsgQ, FTM_EP_ID xEPID, FTM_EP_DATA_PTR pData);

#endif
