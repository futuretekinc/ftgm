#ifndef	_FTNM_ACTION_H_
#define	_FTNM_ACTION_H_

#include <pthread.h>
#include "ftm.h"

typedef enum
{
	FTNM_ACTION_MSG_TYPE_RUN = 0
}	FTNM_ACTION_MSG_TYPE, _PTR_ FTNM_ACTION_MSG_TYPE_PTR;

typedef	struct
{
	FTNM_ACTION_MSG_TYPE	xType;
	FTM_ACTION_ID			xActionID;
}	FTNM_ACTION_MSG, _PTR_ FTNM_ACTION_MSG_PTR;

typedef	struct
{
	FTM_ACTION	xInfo;
	FTM_TIMER	xTimer;
}	FTNM_ACTION, _PTR_ FTNM_ACTION_PTR;

typedef	struct
{
}	FTNM_ACTIONM_CONFIG, _PTR_ FTNM_ACTIONM_CONFIG_PTR;

typedef	struct FTNM_ACTIONM_STRUCT
{
	FTNM_ACTIONM_CONFIG	xConfig;

	pthread_t			xThread;
	FTM_BOOL			bStop;

	FTM_MSG_QUEUE_PTR	pMsgQ;
	FTM_LIST_PTR		pActionList;
}	FTNM_ACTIONM, _PTR_ FTNM_ACTIONM_PTR;
	
FTM_RET	FTNM_ACTIONM_create(FTNM_ACTIONM_PTR _PTR_ ppActionM);
FTM_RET	FTNM_ACTIONM_destroy(FTNM_ACTIONM_PTR _PTR_ ppActionM);

FTM_RET	FTNM_ACTIONM_init(FTNM_ACTIONM_PTR pActionM);
FTM_RET	FTNM_ACTIONM_final(FTNM_ACTIONM_PTR pActionM);

FTM_RET	FTNM_ACTIONM_loadConfig(FTNM_ACTIONM_PTR pActionM, FTNM_ACTIONM_CONFIG_PTR pConfig);
FTM_RET	FTNM_ACTIONM_loadConfigFromFile(FTNM_ACTIONM_PTR pActionM, FTM_CHAR_PTR pFileName);

FTM_RET	FTNM_ACTIONM_start(FTNM_ACTIONM_PTR pActionM);
FTM_RET	FTNM_ACTIONM_stop(FTNM_ACTIONM_PTR pActionM);

FTM_RET	FTNM_ACTIONM_add(FTNM_ACTIONM_PTR pActionM, FTM_ACTION_PTR pInfo);
FTM_RET	FTNM_ACTIONM_del(FTNM_ACTIONM_PTR pActionM, FTM_ACTION_ID  xActorID);
FTM_RET	FTNM_ACTIONM_count(FTNM_ACTIONM_PTR pActionM, FTM_ULONG_PTR pulCount);
FTM_RET	FTNM_ACTIONM_get(FTNM_ACTIONM_PTR pActionM, FTM_ACTION_ID xActorID, FTNM_ACTION_PTR _PTR_ ppActor);
FTM_RET	FTNM_ACTIONM_getAt(FTNM_ACTIONM_PTR pActionM, FTM_ULONG ulIndex, FTNM_ACTION_PTR _PTR_ ppActor);

FTM_RET	FTNM_ACTIONM_run(FTNM_ACTIONM_PTR pActionM, FTM_ACTION_ID xActionID);
#endif
